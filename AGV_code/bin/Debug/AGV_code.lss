
bin\Debug\AGV_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800200  00000748  000007fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000748  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800216  00800216  00000812  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00000812  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 000000a0  00000000  00000000  00000815  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001ee  00000000  00000000  000008b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ab9  00000000  00000000  00000aa3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005b2  00000000  00000000  0000155c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000937  00000000  00000000  00001b0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b0  00000000  00000000  00002448  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b2  00000000  00000000  000025f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003e1  00000000  00000000  000029aa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 e4       	ldi	r30, 0x48	; 72
  fc:	f7 e0       	ldi	r31, 0x07	; 7
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 31       	cpi	r26, 0x16	; 22
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	12 e0       	ldi	r17, 0x02	; 2
 110:	a6 e1       	ldi	r26, 0x16	; 22
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a8 31       	cpi	r26, 0x18	; 24
 11a:	b1 07       	cpc	r27, r17
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 a2 01 	call	0x344	; 0x344 <main>
 122:	0c 94 a2 03 	jmp	0x744	; 0x744 <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <I2C_Init>:

#include "I2C_Master_H_file.h"								/* Include I2C header file */

void I2C_Init()												/* I2C initialize function */
{
	TWBR = BITRATE(TWSR = 0x00);							/* Get bit rate register value by formula */
 12a:	10 92 b9 00 	sts	0x00B9, r1
 12e:	88 e4       	ldi	r24, 0x48	; 72
 130:	80 93 b8 00 	sts	0x00B8, r24
}	
 134:	08 95       	ret

00000136 <I2C_Start>:


uint8_t I2C_Start(char slave_write_address)					/* I2C start function */
{
 136:	98 2f       	mov	r25, r24
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
 138:	84 ea       	ldi	r24, 0xA4	; 164
 13a:	80 93 bc 00 	sts	0x00BC, r24
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
 13e:	ec eb       	ldi	r30, 0xBC	; 188
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	88 23       	and	r24, r24
 146:	ec f7       	brge	.-6      	; 0x142 <I2C_Start+0xc>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
 148:	80 91 b9 00 	lds	r24, 0x00B9
	if (status != 0x08)										/* Check weather start condition transmitted successfully or not? */
 14c:	88 7f       	andi	r24, 0xF8	; 248
 14e:	88 30       	cpi	r24, 0x08	; 8
 150:	11 f0       	breq	.+4      	; 0x156 <I2C_Start+0x20>
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	08 95       	ret
	return 0;												/* If not then return 0 to indicate start condition fail */
	TWDR = slave_write_address;								/* If yes then write SLA+W in TWI data register */
 156:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
 15a:	84 e8       	ldi	r24, 0x84	; 132
 15c:	80 93 bc 00 	sts	0x00BC, r24
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
 160:	ec eb       	ldi	r30, 0xBC	; 188
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	88 23       	and	r24, r24
 168:	ec f7       	brge	.-6      	; 0x164 <I2C_Start+0x2e>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */	
 16a:	80 91 b9 00 	lds	r24, 0x00B9
 16e:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x18)										/* Check weather SLA+W transmitted & ack received or not? */
 170:	88 31       	cpi	r24, 0x18	; 24
 172:	11 f4       	brne	.+4      	; 0x178 <I2C_Start+0x42>
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	08 95       	ret
	return 1;												/* If yes then return 1 to indicate ack received i.e. ready to accept data byte */
	if (status == 0x20)										/* Check weather SLA+W transmitted & nack received or not? */
 178:	80 32       	cpi	r24, 0x20	; 32
 17a:	11 f0       	breq	.+4      	; 0x180 <I2C_Start+0x4a>
 17c:	83 e0       	ldi	r24, 0x03	; 3
 17e:	08 95       	ret
 180:	82 e0       	ldi	r24, 0x02	; 2
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
}
 182:	08 95       	ret

00000184 <I2C_Repeated_Start>:

uint8_t I2C_Repeated_Start(char slave_read_address)			/* I2C repeated start function */
{
 184:	98 2f       	mov	r25, r24
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
 186:	84 ea       	ldi	r24, 0xA4	; 164
 188:	80 93 bc 00 	sts	0x00BC, r24
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
 18c:	ec eb       	ldi	r30, 0xBC	; 188
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	80 81       	ld	r24, Z
 192:	88 23       	and	r24, r24
 194:	ec f7       	brge	.-6      	; 0x190 <I2C_Repeated_Start+0xc>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
 196:	80 91 b9 00 	lds	r24, 0x00B9
	if (status != 0x10)										/* Check weather repeated start condition transmitted successfully or not? */
 19a:	88 7f       	andi	r24, 0xF8	; 248
 19c:	80 31       	cpi	r24, 0x10	; 16
 19e:	11 f0       	breq	.+4      	; 0x1a4 <I2C_Repeated_Start+0x20>
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	08 95       	ret
	return 0;												/* If no then return 0 to indicate repeated start condition fail */
	TWDR = slave_read_address;								/* If yes then write SLA+R in TWI data register */
 1a4:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
 1a8:	84 e8       	ldi	r24, 0x84	; 132
 1aa:	80 93 bc 00 	sts	0x00BC, r24
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
 1ae:	ec eb       	ldi	r30, 0xBC	; 188
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	88 23       	and	r24, r24
 1b6:	ec f7       	brge	.-6      	; 0x1b2 <I2C_Repeated_Start+0x2e>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
 1b8:	80 91 b9 00 	lds	r24, 0x00B9
 1bc:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x40)										/* Check weather SLA+R transmitted & ack received or not? */
 1be:	80 34       	cpi	r24, 0x40	; 64
 1c0:	11 f4       	brne	.+4      	; 0x1c6 <I2C_Repeated_Start+0x42>
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	08 95       	ret
	return 1;												/* If yes then return 1 to indicate ack received */ 
	if (status == 0x20)										/* Check weather SLA+R transmitted & nack received or not? */
 1c6:	80 32       	cpi	r24, 0x20	; 32
 1c8:	11 f0       	breq	.+4      	; 0x1ce <I2C_Repeated_Start+0x4a>
 1ca:	83 e0       	ldi	r24, 0x03	; 3
 1cc:	08 95       	ret
 1ce:	82 e0       	ldi	r24, 0x02	; 2
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
}
 1d0:	08 95       	ret

000001d2 <I2C_Stop>:

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
 1d2:	84 e9       	ldi	r24, 0x94	; 148
 1d4:	80 93 bc 00 	sts	0x00BC, r24
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */ 
 1d8:	ec eb       	ldi	r30, 0xBC	; 188
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	84 fd       	sbrc	r24, 4
 1e0:	fd cf       	rjmp	.-6      	; 0x1dc <I2C_Stop+0xa>
}
 1e2:	08 95       	ret

000001e4 <I2C_Start_Wait>:

void I2C_Start_Wait(char slave_write_address)				/* I2C start wait function */
{
 1e4:	bf 92       	push	r11
 1e6:	cf 92       	push	r12
 1e8:	df 92       	push	r13
 1ea:	ef 92       	push	r14
 1ec:	ff 92       	push	r15
 1ee:	0f 93       	push	r16
 1f0:	1f 93       	push	r17
 1f2:	cf 93       	push	r28
 1f4:	df 93       	push	r29
 1f6:	e8 2e       	mov	r14, r24
	uint8_t status;											/* Declare variable */
	while (1)
	{
		TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);				/* Enable TWI, generate start condition and clear interrupt flag */
 1f8:	cc eb       	ldi	r28, 0xBC	; 188
 1fa:	d0 e0       	ldi	r29, 0x00	; 0
 1fc:	0f 2e       	mov	r0, r31
 1fe:	f4 ea       	ldi	r31, 0xA4	; 164
 200:	ff 2e       	mov	r15, r31
 202:	f0 2d       	mov	r31, r0
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (start condition) */
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
 204:	09 eb       	ldi	r16, 0xB9	; 185
 206:	10 e0       	ldi	r17, 0x00	; 0
		if (status != 0x08)									/* Check weather start condition transmitted successfully or not? */
		continue;											/* If no then continue with start loop again */
		TWDR = slave_write_address;							/* If yes then write SLA+W in TWI data register */
 208:	0f 2e       	mov	r0, r31
 20a:	fb eb       	ldi	r31, 0xBB	; 187
 20c:	cf 2e       	mov	r12, r31
 20e:	dd 24       	eor	r13, r13
 210:	f0 2d       	mov	r31, r0
		TWCR = (1<<TWEN)|(1<<TWINT);						/* Enable TWI and clear interrupt flag */
 212:	0f 2e       	mov	r0, r31
 214:	f4 e8       	ldi	r31, 0x84	; 132
 216:	bf 2e       	mov	r11, r31
 218:	f0 2d       	mov	r31, r0
void I2C_Start_Wait(char slave_write_address)				/* I2C start wait function */
{
	uint8_t status;											/* Declare variable */
	while (1)
	{
		TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);				/* Enable TWI, generate start condition and clear interrupt flag */
 21a:	f8 82       	st	Y, r15
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (start condition) */
 21c:	88 81       	ld	r24, Y
 21e:	88 23       	and	r24, r24
 220:	ec f7       	brge	.-6      	; 0x21c <I2C_Start_Wait+0x38>
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
 222:	f8 01       	movw	r30, r16
 224:	80 81       	ld	r24, Z
		if (status != 0x08)									/* Check weather start condition transmitted successfully or not? */
 226:	88 7f       	andi	r24, 0xF8	; 248
 228:	88 30       	cpi	r24, 0x08	; 8
 22a:	b9 f7       	brne	.-18     	; 0x21a <I2C_Start_Wait+0x36>
		continue;											/* If no then continue with start loop again */
		TWDR = slave_write_address;							/* If yes then write SLA+W in TWI data register */
 22c:	f6 01       	movw	r30, r12
 22e:	e0 82       	st	Z, r14
		TWCR = (1<<TWEN)|(1<<TWINT);						/* Enable TWI and clear interrupt flag */
 230:	b8 82       	st	Y, r11
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (Write operation) */
 232:	88 81       	ld	r24, Y
 234:	88 23       	and	r24, r24
 236:	ec f7       	brge	.-6      	; 0x232 <I2C_Start_Wait+0x4e>
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
 238:	f8 01       	movw	r30, r16
 23a:	80 81       	ld	r24, Z
		if (status != 0x18 )								/* Check weather SLA+W transmitted & ack received or not? */
 23c:	88 7f       	andi	r24, 0xF8	; 248
 23e:	88 31       	cpi	r24, 0x18	; 24
 240:	19 f0       	breq	.+6      	; 0x248 <I2C_Start_Wait+0x64>
		{
			I2C_Stop();										/* If not then generate stop condition */
 242:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <I2C_Stop>
 246:	e9 cf       	rjmp	.-46     	; 0x21a <I2C_Start_Wait+0x36>
			continue;										/* continue with start loop again */
		}
		break;												/* If yes then break loop */
	}
}
 248:	df 91       	pop	r29
 24a:	cf 91       	pop	r28
 24c:	1f 91       	pop	r17
 24e:	0f 91       	pop	r16
 250:	ff 90       	pop	r15
 252:	ef 90       	pop	r14
 254:	df 90       	pop	r13
 256:	cf 90       	pop	r12
 258:	bf 90       	pop	r11
 25a:	08 95       	ret

0000025c <I2C_Write>:

uint8_t I2C_Write(char data)								/* I2C write function */
{
	uint8_t status;											/* Declare variable */
	TWDR = data;											/* Copy data in TWI data register */
 25c:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
 260:	84 e8       	ldi	r24, 0x84	; 132
 262:	80 93 bc 00 	sts	0x00BC, r24
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
 266:	ec eb       	ldi	r30, 0xBC	; 188
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	80 81       	ld	r24, Z
 26c:	88 23       	and	r24, r24
 26e:	ec f7       	brge	.-6      	; 0x26a <I2C_Write+0xe>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
 270:	80 91 b9 00 	lds	r24, 0x00B9
 274:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
 276:	88 32       	cpi	r24, 0x28	; 40
 278:	11 f4       	brne	.+4      	; 0x27e <I2C_Write+0x22>
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	08 95       	ret
	return 0;												/* If yes then return 0 to indicate ack received */
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
 27e:	80 33       	cpi	r24, 0x30	; 48
 280:	11 f0       	breq	.+4      	; 0x286 <I2C_Write+0x2a>
 282:	82 e0       	ldi	r24, 0x02	; 2
 284:	08 95       	ret
 286:	81 e0       	ldi	r24, 0x01	; 1
	return 1;												/* If yes then return 1 to indicate nack received */
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
}
 288:	08 95       	ret

0000028a <I2C_Read_Ack>:

char I2C_Read_Ack()											/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
 28a:	84 ec       	ldi	r24, 0xC4	; 196
 28c:	80 93 bc 00 	sts	0x00BC, r24
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
 290:	ec eb       	ldi	r30, 0xBC	; 188
 292:	f0 e0       	ldi	r31, 0x00	; 0
 294:	80 81       	ld	r24, Z
 296:	88 23       	and	r24, r24
 298:	ec f7       	brge	.-6      	; 0x294 <I2C_Read_Ack+0xa>
	return TWDR;											/* Return received data */
 29a:	80 91 bb 00 	lds	r24, 0x00BB
}	
 29e:	08 95       	ret

000002a0 <I2C_Read_Nack>:

char I2C_Read_Nack()										/* I2C read nack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT);								/* Enable TWI and clear interrupt flag */
 2a0:	84 e8       	ldi	r24, 0x84	; 132
 2a2:	80 93 bc 00 	sts	0x00BC, r24
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
 2a6:	ec eb       	ldi	r30, 0xBC	; 188
 2a8:	f0 e0       	ldi	r31, 0x00	; 0
 2aa:	80 81       	ld	r24, Z
 2ac:	88 23       	and	r24, r24
 2ae:	ec f7       	brge	.-6      	; 0x2aa <I2C_Read_Nack+0xa>
	return TWDR;											/* Return received data */
 2b0:	80 91 bb 00 	lds	r24, 0x00BB
}	
 2b4:	08 95       	ret

000002b6 <UltrasoonRead>:
}



int UltrasoonRead(int sensor)
{
 2b6:	df 93       	push	r29
 2b8:	cf 93       	push	r28
 2ba:	00 d0       	rcall	.+0      	; 0x2bc <UltrasoonRead+0x6>
 2bc:	0f 92       	push	r0
 2be:	cd b7       	in	r28, 0x3d	; 61
 2c0:	de b7       	in	r29, 0x3e	; 62

    //-initialize variables-------
    volatile float echo=0.0;
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	a0 e0       	ldi	r26, 0x00	; 0
 2c8:	b0 e0       	ldi	r27, 0x00	; 0
 2ca:	89 83       	std	Y+1, r24	; 0x01
 2cc:	9a 83       	std	Y+2, r25	; 0x02
 2ce:	ab 83       	std	Y+3, r26	; 0x03
 2d0:	bc 83       	std	Y+4, r27	; 0x04

    //-then measure pulse width---
    //----------------------------


    return echo;
 2d2:	69 81       	ldd	r22, Y+1	; 0x01
 2d4:	7a 81       	ldd	r23, Y+2	; 0x02
 2d6:	8b 81       	ldd	r24, Y+3	; 0x03
 2d8:	9c 81       	ldd	r25, Y+4	; 0x04
 2da:	0e 94 93 02 	call	0x526	; 0x526 <__fixsfsi>
 2de:	9b 01       	movw	r18, r22
 2e0:	ac 01       	movw	r20, r24
}
 2e2:	86 2f       	mov	r24, r22
 2e4:	93 2f       	mov	r25, r19
 2e6:	0f 90       	pop	r0
 2e8:	0f 90       	pop	r0
 2ea:	0f 90       	pop	r0
 2ec:	0f 90       	pop	r0
 2ee:	cf 91       	pop	r28
 2f0:	df 91       	pop	r29
 2f2:	08 95       	ret

000002f4 <MagnometerRead>:
    this way magnets are ignored
    */
    //----------------------------

    return Xvalue;
}
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	08 95       	ret

000002fa <IRDistanceRead>:

int IRDistanceRead(int sensor)
{
    int Distance=0;

    switch (sensor)
 2fa:	81 30       	cpi	r24, 0x01	; 1
 2fc:	91 05       	cpc	r25, r1
 2fe:	59 f0       	breq	.+22     	; 0x316 <IRDistanceRead+0x1c>
 300:	82 30       	cpi	r24, 0x02	; 2
 302:	91 05       	cpc	r25, r1
 304:	79 f0       	breq	.+30     	; 0x324 <IRDistanceRead+0x2a>
 306:	89 2b       	or	r24, r25
 308:	99 f4       	brne	.+38     	; 0x330 <IRDistanceRead+0x36>
    {
    case 0: // Set pin 0 as read pin
        ADMUX  = (ADMUX) & ~((1<<MUX0)|(1<<MUX1)|(1<<MUX2));    //PIN selection
 30a:	ec e7       	ldi	r30, 0x7C	; 124
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	80 81       	ld	r24, Z
 310:	88 7f       	andi	r24, 0xF8	; 248
 312:	80 83       	st	Z, r24
 314:	0d c0       	rjmp	.+26     	; 0x330 <IRDistanceRead+0x36>
        break;

    case 1:// Set pin 2 as read pin
        ADMUX  = (ADMUX | (1<<MUX1)) & ~((1<<MUX0)|(1<<MUX2));  //PIN selection
 316:	ec e7       	ldi	r30, 0x7C	; 124
 318:	f0 e0       	ldi	r31, 0x00	; 0
 31a:	80 81       	ld	r24, Z
 31c:	88 7f       	andi	r24, 0xF8	; 248
 31e:	82 60       	ori	r24, 0x02	; 2
 320:	80 83       	st	Z, r24
 322:	06 c0       	rjmp	.+12     	; 0x330 <IRDistanceRead+0x36>
        break;

    case 2: // Set pin 4 as read pin
         ADMUX  = (ADMUX | (1<<MUX2)) & ~((1<<MUX0)|(1<<MUX1)); //PIN selection
 324:	ec e7       	ldi	r30, 0x7C	; 124
 326:	f0 e0       	ldi	r31, 0x00	; 0
 328:	80 81       	ld	r24, Z
 32a:	88 7f       	andi	r24, 0xF8	; 248
 32c:	84 60       	ori	r24, 0x04	; 4
 32e:	80 83       	st	Z, r24
        break;
    }



    ADCSRA |= (1 << ADSC);
 330:	ea e7       	ldi	r30, 0x7A	; 122
 332:	f0 e0       	ldi	r31, 0x00	; 0
 334:	80 81       	ld	r24, Z
 336:	80 64       	ori	r24, 0x40	; 64
 338:	80 83       	st	Z, r24
    while ((ADCSRA & (1 << ADSC)) == 1);
 33a:	e0 81       	ld	r30, Z

// ADC data is left aligned and can be read from ADCH as an 8 bit value
    Distance = (ADCH);
 33c:	80 91 79 00 	lds	r24, 0x0079

    return Distance;
}
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	08 95       	ret

00000344 <main>:
int MagnometerRead();
int IRDistanceRead(int sensor);


int main(void)
{
 344:	1f 93       	push	r17
 346:	cf 93       	push	r28
 348:	df 93       	push	r29

//-Initialise ADCs---------
    ADMUX |= (0 << REFS1) |(1 << REFS0)|(1<<ADLAR);     //Voltage reference via capacitor on arduino
 34a:	ec e7       	ldi	r30, 0x7C	; 124
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	80 81       	ld	r24, Z
 350:	80 66       	ori	r24, 0x60	; 96
 352:	80 83       	st	Z, r24
    ADCSRA |= (1 << ADEN) |(0 << ADIE);                 //ADC enable and ADC conversion complete interrupt disabled
 354:	ea e7       	ldi	r30, 0x7A	; 122
 356:	f0 e0       	ldi	r31, 0x00	; 0
 358:	80 81       	ld	r24, Z
 35a:	80 68       	ori	r24, 0x80	; 128
 35c:	80 83       	st	Z, r24
    ADCSRA |= (1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0);   //Prescaler settings (Currently 128)
 35e:	80 81       	ld	r24, Z
 360:	87 60       	ori	r24, 0x07	; 7
 362:	80 83       	st	Z, r24
    DIDR0 = 0b11111111;                                 //Disable Digital input
 364:	8f ef       	ldi	r24, 0xFF	; 255
 366:	80 93 7e 00 	sts	0x007E, r24
    DIDR2 = 0b11111111;                                 //Disable Digital input
 36a:	80 93 7d 00 	sts	0x007D, r24
    ADCSRA |= (1 << ADSC);                              //Run a single conversion in order to prime the circuit
 36e:	80 81       	ld	r24, Z
 370:	80 64       	ori	r24, 0x40	; 64
 372:	80 83       	st	Z, r24

//-------------------------


//-Initialise Serial-------
    initUSART();
 374:	0e 94 fe 01 	call	0x3fc	; 0x3fc <initUSART>
    printString("RDY");
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	92 e0       	ldi	r25, 0x02	; 2
 37c:	0e 94 20 02 	call	0x440	; 0x440 <printString>
    */
//-------------------------


//-zero magnometer---------
    I2C_Init();
 380:	0e 94 95 00 	call	0x12a	; 0x12a <I2C_Init>
	I2C_Start(0x3C);	/* Start and write SLA+W */
 384:	8c e3       	ldi	r24, 0x3C	; 60
 386:	0e 94 9b 00 	call	0x136	; 0x136 <I2C_Start>
	I2C_Write(0x00);	/* Write memory location address */
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	0e 94 2e 01 	call	0x25c	; 0x25c <I2C_Write>
	I2C_Write(0x70);	/* Configure register A as 8-average, 15 Hz default, normal measurement */
 390:	80 e7       	ldi	r24, 0x70	; 112
 392:	0e 94 2e 01 	call	0x25c	; 0x25c <I2C_Write>
	I2C_Write(0xA0);	/* Configure register B for gain */
 396:	80 ea       	ldi	r24, 0xA0	; 160
 398:	0e 94 2e 01 	call	0x25c	; 0x25c <I2C_Write>
	I2C_Write(0x00);	/* Configure continuous measurement mode in mode register */
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	0e 94 2e 01 	call	0x25c	; 0x25c <I2C_Write>
	I2C_Stop();		/* Stop I2C */
 3a2:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <I2C_Stop>
    north_angle = MagnometerRead();
 3a6:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <MagnometerRead>
 3aa:	90 93 17 02 	sts	0x0217, r25
 3ae:	80 93 16 02 	sts	0x0216, r24
    printString(" working");
 3b2:	84 e0       	ldi	r24, 0x04	; 4
 3b4:	92 e0       	ldi	r25, 0x02	; 2
 3b6:	0e 94 20 02 	call	0x440	; 0x440 <printString>
//-------------------------

//-Enable sei--------------
    sei();
 3ba:	78 94       	sei
//-------------------------
    printString(" working");
 3bc:	84 e0       	ldi	r24, 0x04	; 4
 3be:	92 e0       	ldi	r25, 0x02	; 2
 3c0:	0e 94 20 02 	call	0x440	; 0x440 <printString>
	x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	//z = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	//y = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Nack());
        I2C_Stop();		/* Stop I2C */
        printByte(x);
        printString("working");
 3c4:	cd e0       	ldi	r28, 0x0D	; 13
 3c6:	d2 e0       	ldi	r29, 0x02	; 2
    printString(" working");
//-End of setup-----------------------------------------]
    while(1)
    {
        uint8_t x, y, z;
        I2C_Start(0x3C);	/* Start and wait for acknowledgment */
 3c8:	8c e3       	ldi	r24, 0x3C	; 60
 3ca:	0e 94 9b 00 	call	0x136	; 0x136 <I2C_Start>
        I2C_Write(0x03);	/* Write memory location address */
 3ce:	83 e0       	ldi	r24, 0x03	; 3
 3d0:	0e 94 2e 01 	call	0x25c	; 0x25c <I2C_Write>
        I2C_Repeated_Start(0x3D);/* Generate repeat start condition with SLA+R */
 3d4:	8d e3       	ldi	r24, 0x3D	; 61
 3d6:	0e 94 c2 00 	call	0x184	; 0x184 <I2C_Repeated_Start>
	x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
 3da:	0e 94 45 01 	call	0x28a	; 0x28a <I2C_Read_Ack>
 3de:	0e 94 45 01 	call	0x28a	; 0x28a <I2C_Read_Ack>
 3e2:	18 2f       	mov	r17, r24
	//z = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	//y = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Nack());
        I2C_Stop();		/* Stop I2C */
 3e4:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <I2C_Stop>
        printByte(x);
 3e8:	81 2f       	mov	r24, r17
 3ea:	0e 94 61 02 	call	0x4c2	; 0x4c2 <printByte>
        printString("working");
 3ee:	ce 01       	movw	r24, r28
 3f0:	0e 94 20 02 	call	0x440	; 0x440 <printString>
        transmitByte('\n');
 3f4:	8a e0       	ldi	r24, 0x0A	; 10
 3f6:	0e 94 0f 02 	call	0x41e	; 0x41e <transmitByte>
 3fa:	e6 cf       	rjmp	.-52     	; 0x3c8 <main+0x84>

000003fc <initUSART>:
 3fc:	10 92 c5 00 	sts	0x00C5, r1
 400:	87 e6       	ldi	r24, 0x67	; 103
 402:	80 93 c4 00 	sts	0x00C4, r24
 406:	e0 ec       	ldi	r30, 0xC0	; 192
 408:	f0 e0       	ldi	r31, 0x00	; 0
 40a:	80 81       	ld	r24, Z
 40c:	8d 7f       	andi	r24, 0xFD	; 253
 40e:	80 83       	st	Z, r24
 410:	88 e1       	ldi	r24, 0x18	; 24
 412:	80 93 c1 00 	sts	0x00C1, r24
 416:	86 e0       	ldi	r24, 0x06	; 6
 418:	80 93 c2 00 	sts	0x00C2, r24
 41c:	08 95       	ret

0000041e <transmitByte>:
 41e:	98 2f       	mov	r25, r24
 420:	e0 ec       	ldi	r30, 0xC0	; 192
 422:	f0 e0       	ldi	r31, 0x00	; 0
 424:	80 81       	ld	r24, Z
 426:	85 ff       	sbrs	r24, 5
 428:	fd cf       	rjmp	.-6      	; 0x424 <transmitByte+0x6>
 42a:	90 93 c6 00 	sts	0x00C6, r25
 42e:	08 95       	ret

00000430 <receiveByte>:
 430:	e0 ec       	ldi	r30, 0xC0	; 192
 432:	f0 e0       	ldi	r31, 0x00	; 0
 434:	80 81       	ld	r24, Z
 436:	88 23       	and	r24, r24
 438:	ec f7       	brge	.-6      	; 0x434 <receiveByte+0x4>
 43a:	80 91 c6 00 	lds	r24, 0x00C6
 43e:	08 95       	ret

00000440 <printString>:
 440:	1f 93       	push	r17
 442:	cf 93       	push	r28
 444:	df 93       	push	r29
 446:	ec 01       	movw	r28, r24
 448:	88 81       	ld	r24, Y
 44a:	88 23       	and	r24, r24
 44c:	51 f0       	breq	.+20     	; 0x462 <printString+0x22>
 44e:	10 e0       	ldi	r17, 0x00	; 0
 450:	0e 94 0f 02 	call	0x41e	; 0x41e <transmitByte>
 454:	1f 5f       	subi	r17, 0xFF	; 255
 456:	fe 01       	movw	r30, r28
 458:	e1 0f       	add	r30, r17
 45a:	f1 1d       	adc	r31, r1
 45c:	80 81       	ld	r24, Z
 45e:	88 23       	and	r24, r24
 460:	b9 f7       	brne	.-18     	; 0x450 <printString+0x10>
 462:	df 91       	pop	r29
 464:	cf 91       	pop	r28
 466:	1f 91       	pop	r17
 468:	08 95       	ret

0000046a <readString>:
 46a:	ef 92       	push	r14
 46c:	ff 92       	push	r15
 46e:	0f 93       	push	r16
 470:	1f 93       	push	r17
 472:	cf 93       	push	r28
 474:	df 93       	push	r29
 476:	7c 01       	movw	r14, r24
 478:	70 e0       	ldi	r23, 0x00	; 0
 47a:	eb 01       	movw	r28, r22
 47c:	21 97       	sbiw	r28, 0x01	; 1
 47e:	1c 16       	cp	r1, r28
 480:	1d 06       	cpc	r1, r29
 482:	14 f0       	brlt	.+4      	; 0x488 <readString+0x1e>
 484:	00 e0       	ldi	r16, 0x00	; 0
 486:	12 c0       	rjmp	.+36     	; 0x4ac <readString+0x42>
 488:	00 e0       	ldi	r16, 0x00	; 0
 48a:	0e 94 18 02 	call	0x430	; 0x430 <receiveByte>
 48e:	18 2f       	mov	r17, r24
 490:	0e 94 0f 02 	call	0x41e	; 0x41e <transmitByte>
 494:	1d 30       	cpi	r17, 0x0D	; 13
 496:	51 f0       	breq	.+20     	; 0x4ac <readString+0x42>
 498:	f7 01       	movw	r30, r14
 49a:	e0 0f       	add	r30, r16
 49c:	f1 1d       	adc	r31, r1
 49e:	10 83       	st	Z, r17
 4a0:	0f 5f       	subi	r16, 0xFF	; 255
 4a2:	80 2f       	mov	r24, r16
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	8c 17       	cp	r24, r28
 4a8:	9d 07       	cpc	r25, r29
 4aa:	7c f3       	brlt	.-34     	; 0x48a <readString+0x20>
 4ac:	f7 01       	movw	r30, r14
 4ae:	e0 0f       	add	r30, r16
 4b0:	f1 1d       	adc	r31, r1
 4b2:	10 82       	st	Z, r1
 4b4:	df 91       	pop	r29
 4b6:	cf 91       	pop	r28
 4b8:	1f 91       	pop	r17
 4ba:	0f 91       	pop	r16
 4bc:	ff 90       	pop	r15
 4be:	ef 90       	pop	r14
 4c0:	08 95       	ret

000004c2 <printByte>:
 4c2:	1f 93       	push	r17
 4c4:	18 2f       	mov	r17, r24
 4c6:	64 e6       	ldi	r22, 0x64	; 100
 4c8:	0e 94 5f 03 	call	0x6be	; 0x6be <__udivmodqi4>
 4cc:	80 5d       	subi	r24, 0xD0	; 208
 4ce:	0e 94 0f 02 	call	0x41e	; 0x41e <transmitByte>
 4d2:	81 2f       	mov	r24, r17
 4d4:	6a e0       	ldi	r22, 0x0A	; 10
 4d6:	0e 94 5f 03 	call	0x6be	; 0x6be <__udivmodqi4>
 4da:	0e 94 5f 03 	call	0x6be	; 0x6be <__udivmodqi4>
 4de:	89 2f       	mov	r24, r25
 4e0:	80 5d       	subi	r24, 0xD0	; 208
 4e2:	0e 94 0f 02 	call	0x41e	; 0x41e <transmitByte>
 4e6:	81 2f       	mov	r24, r17
 4e8:	6a e0       	ldi	r22, 0x0A	; 10
 4ea:	0e 94 5f 03 	call	0x6be	; 0x6be <__udivmodqi4>
 4ee:	89 2f       	mov	r24, r25
 4f0:	80 5d       	subi	r24, 0xD0	; 208
 4f2:	0e 94 0f 02 	call	0x41e	; 0x41e <transmitByte>
 4f6:	1f 91       	pop	r17
 4f8:	08 95       	ret

000004fa <nibbleToHexCharacter>:
 4fa:	8a 30       	cpi	r24, 0x0A	; 10
 4fc:	10 f4       	brcc	.+4      	; 0x502 <nibbleToHexCharacter+0x8>
 4fe:	80 5d       	subi	r24, 0xD0	; 208
 500:	08 95       	ret
 502:	89 5c       	subi	r24, 0xC9	; 201
 504:	08 95       	ret

00000506 <printHexByte>:
 506:	1f 93       	push	r17
 508:	18 2f       	mov	r17, r24
 50a:	82 95       	swap	r24
 50c:	8f 70       	andi	r24, 0x0F	; 15
 50e:	0e 94 7d 02 	call	0x4fa	; 0x4fa <nibbleToHexCharacter>
 512:	0e 94 0f 02 	call	0x41e	; 0x41e <transmitByte>
 516:	81 2f       	mov	r24, r17
 518:	8f 70       	andi	r24, 0x0F	; 15
 51a:	0e 94 7d 02 	call	0x4fa	; 0x4fa <nibbleToHexCharacter>
 51e:	0e 94 0f 02 	call	0x41e	; 0x41e <transmitByte>
 522:	1f 91       	pop	r17
 524:	08 95       	ret

00000526 <__fixsfsi>:
 526:	ac e0       	ldi	r26, 0x0C	; 12
 528:	b0 e0       	ldi	r27, 0x00	; 0
 52a:	e9 e9       	ldi	r30, 0x99	; 153
 52c:	f2 e0       	ldi	r31, 0x02	; 2
 52e:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__prologue_saves__+0x20>
 532:	69 83       	std	Y+1, r22	; 0x01
 534:	7a 83       	std	Y+2, r23	; 0x02
 536:	8b 83       	std	Y+3, r24	; 0x03
 538:	9c 83       	std	Y+4, r25	; 0x04
 53a:	ce 01       	movw	r24, r28
 53c:	01 96       	adiw	r24, 0x01	; 1
 53e:	be 01       	movw	r22, r28
 540:	6b 5f       	subi	r22, 0xFB	; 251
 542:	7f 4f       	sbci	r23, 0xFF	; 255
 544:	0e 94 e7 02 	call	0x5ce	; 0x5ce <__unpack_f>
 548:	8d 81       	ldd	r24, Y+5	; 0x05
 54a:	82 30       	cpi	r24, 0x02	; 2
 54c:	61 f1       	breq	.+88     	; 0x5a6 <__fixsfsi+0x80>
 54e:	82 30       	cpi	r24, 0x02	; 2
 550:	50 f1       	brcs	.+84     	; 0x5a6 <__fixsfsi+0x80>
 552:	84 30       	cpi	r24, 0x04	; 4
 554:	21 f4       	brne	.+8      	; 0x55e <__fixsfsi+0x38>
 556:	8e 81       	ldd	r24, Y+6	; 0x06
 558:	88 23       	and	r24, r24
 55a:	51 f1       	breq	.+84     	; 0x5b0 <__fixsfsi+0x8a>
 55c:	2e c0       	rjmp	.+92     	; 0x5ba <__fixsfsi+0x94>
 55e:	2f 81       	ldd	r18, Y+7	; 0x07
 560:	38 85       	ldd	r19, Y+8	; 0x08
 562:	37 fd       	sbrc	r19, 7
 564:	20 c0       	rjmp	.+64     	; 0x5a6 <__fixsfsi+0x80>
 566:	6e 81       	ldd	r22, Y+6	; 0x06
 568:	2f 31       	cpi	r18, 0x1F	; 31
 56a:	31 05       	cpc	r19, r1
 56c:	1c f0       	brlt	.+6      	; 0x574 <__fixsfsi+0x4e>
 56e:	66 23       	and	r22, r22
 570:	f9 f0       	breq	.+62     	; 0x5b0 <__fixsfsi+0x8a>
 572:	23 c0       	rjmp	.+70     	; 0x5ba <__fixsfsi+0x94>
 574:	8e e1       	ldi	r24, 0x1E	; 30
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	82 1b       	sub	r24, r18
 57a:	93 0b       	sbc	r25, r19
 57c:	29 85       	ldd	r18, Y+9	; 0x09
 57e:	3a 85       	ldd	r19, Y+10	; 0x0a
 580:	4b 85       	ldd	r20, Y+11	; 0x0b
 582:	5c 85       	ldd	r21, Y+12	; 0x0c
 584:	04 c0       	rjmp	.+8      	; 0x58e <__fixsfsi+0x68>
 586:	56 95       	lsr	r21
 588:	47 95       	ror	r20
 58a:	37 95       	ror	r19
 58c:	27 95       	ror	r18
 58e:	8a 95       	dec	r24
 590:	d2 f7       	brpl	.-12     	; 0x586 <__fixsfsi+0x60>
 592:	66 23       	and	r22, r22
 594:	b1 f0       	breq	.+44     	; 0x5c2 <__fixsfsi+0x9c>
 596:	50 95       	com	r21
 598:	40 95       	com	r20
 59a:	30 95       	com	r19
 59c:	21 95       	neg	r18
 59e:	3f 4f       	sbci	r19, 0xFF	; 255
 5a0:	4f 4f       	sbci	r20, 0xFF	; 255
 5a2:	5f 4f       	sbci	r21, 0xFF	; 255
 5a4:	0e c0       	rjmp	.+28     	; 0x5c2 <__fixsfsi+0x9c>
 5a6:	20 e0       	ldi	r18, 0x00	; 0
 5a8:	30 e0       	ldi	r19, 0x00	; 0
 5aa:	40 e0       	ldi	r20, 0x00	; 0
 5ac:	50 e0       	ldi	r21, 0x00	; 0
 5ae:	09 c0       	rjmp	.+18     	; 0x5c2 <__fixsfsi+0x9c>
 5b0:	2f ef       	ldi	r18, 0xFF	; 255
 5b2:	3f ef       	ldi	r19, 0xFF	; 255
 5b4:	4f ef       	ldi	r20, 0xFF	; 255
 5b6:	5f e7       	ldi	r21, 0x7F	; 127
 5b8:	04 c0       	rjmp	.+8      	; 0x5c2 <__fixsfsi+0x9c>
 5ba:	20 e0       	ldi	r18, 0x00	; 0
 5bc:	30 e0       	ldi	r19, 0x00	; 0
 5be:	40 e0       	ldi	r20, 0x00	; 0
 5c0:	50 e8       	ldi	r21, 0x80	; 128
 5c2:	b9 01       	movw	r22, r18
 5c4:	ca 01       	movw	r24, r20
 5c6:	2c 96       	adiw	r28, 0x0c	; 12
 5c8:	e2 e0       	ldi	r30, 0x02	; 2
 5ca:	0c 94 97 03 	jmp	0x72e	; 0x72e <__epilogue_restores__+0x20>

000005ce <__unpack_f>:
 5ce:	fc 01       	movw	r30, r24
 5d0:	db 01       	movw	r26, r22
 5d2:	40 81       	ld	r20, Z
 5d4:	51 81       	ldd	r21, Z+1	; 0x01
 5d6:	22 81       	ldd	r18, Z+2	; 0x02
 5d8:	62 2f       	mov	r22, r18
 5da:	6f 77       	andi	r22, 0x7F	; 127
 5dc:	70 e0       	ldi	r23, 0x00	; 0
 5de:	22 1f       	adc	r18, r18
 5e0:	22 27       	eor	r18, r18
 5e2:	22 1f       	adc	r18, r18
 5e4:	93 81       	ldd	r25, Z+3	; 0x03
 5e6:	89 2f       	mov	r24, r25
 5e8:	88 0f       	add	r24, r24
 5ea:	82 2b       	or	r24, r18
 5ec:	28 2f       	mov	r18, r24
 5ee:	30 e0       	ldi	r19, 0x00	; 0
 5f0:	99 1f       	adc	r25, r25
 5f2:	99 27       	eor	r25, r25
 5f4:	99 1f       	adc	r25, r25
 5f6:	11 96       	adiw	r26, 0x01	; 1
 5f8:	9c 93       	st	X, r25
 5fa:	11 97       	sbiw	r26, 0x01	; 1
 5fc:	21 15       	cp	r18, r1
 5fe:	31 05       	cpc	r19, r1
 600:	a9 f5       	brne	.+106    	; 0x66c <__unpack_f+0x9e>
 602:	41 15       	cp	r20, r1
 604:	51 05       	cpc	r21, r1
 606:	61 05       	cpc	r22, r1
 608:	71 05       	cpc	r23, r1
 60a:	11 f4       	brne	.+4      	; 0x610 <__unpack_f+0x42>
 60c:	82 e0       	ldi	r24, 0x02	; 2
 60e:	37 c0       	rjmp	.+110    	; 0x67e <__unpack_f+0xb0>
 610:	82 e8       	ldi	r24, 0x82	; 130
 612:	9f ef       	ldi	r25, 0xFF	; 255
 614:	13 96       	adiw	r26, 0x03	; 3
 616:	9c 93       	st	X, r25
 618:	8e 93       	st	-X, r24
 61a:	12 97       	sbiw	r26, 0x02	; 2
 61c:	9a 01       	movw	r18, r20
 61e:	ab 01       	movw	r20, r22
 620:	67 e0       	ldi	r22, 0x07	; 7
 622:	22 0f       	add	r18, r18
 624:	33 1f       	adc	r19, r19
 626:	44 1f       	adc	r20, r20
 628:	55 1f       	adc	r21, r21
 62a:	6a 95       	dec	r22
 62c:	d1 f7       	brne	.-12     	; 0x622 <__unpack_f+0x54>
 62e:	83 e0       	ldi	r24, 0x03	; 3
 630:	8c 93       	st	X, r24
 632:	0d c0       	rjmp	.+26     	; 0x64e <__unpack_f+0x80>
 634:	22 0f       	add	r18, r18
 636:	33 1f       	adc	r19, r19
 638:	44 1f       	adc	r20, r20
 63a:	55 1f       	adc	r21, r21
 63c:	12 96       	adiw	r26, 0x02	; 2
 63e:	8d 91       	ld	r24, X+
 640:	9c 91       	ld	r25, X
 642:	13 97       	sbiw	r26, 0x03	; 3
 644:	01 97       	sbiw	r24, 0x01	; 1
 646:	13 96       	adiw	r26, 0x03	; 3
 648:	9c 93       	st	X, r25
 64a:	8e 93       	st	-X, r24
 64c:	12 97       	sbiw	r26, 0x02	; 2
 64e:	20 30       	cpi	r18, 0x00	; 0
 650:	80 e0       	ldi	r24, 0x00	; 0
 652:	38 07       	cpc	r19, r24
 654:	80 e0       	ldi	r24, 0x00	; 0
 656:	48 07       	cpc	r20, r24
 658:	80 e4       	ldi	r24, 0x40	; 64
 65a:	58 07       	cpc	r21, r24
 65c:	58 f3       	brcs	.-42     	; 0x634 <__unpack_f+0x66>
 65e:	14 96       	adiw	r26, 0x04	; 4
 660:	2d 93       	st	X+, r18
 662:	3d 93       	st	X+, r19
 664:	4d 93       	st	X+, r20
 666:	5c 93       	st	X, r21
 668:	17 97       	sbiw	r26, 0x07	; 7
 66a:	08 95       	ret
 66c:	2f 3f       	cpi	r18, 0xFF	; 255
 66e:	31 05       	cpc	r19, r1
 670:	79 f4       	brne	.+30     	; 0x690 <__unpack_f+0xc2>
 672:	41 15       	cp	r20, r1
 674:	51 05       	cpc	r21, r1
 676:	61 05       	cpc	r22, r1
 678:	71 05       	cpc	r23, r1
 67a:	19 f4       	brne	.+6      	; 0x682 <__unpack_f+0xb4>
 67c:	84 e0       	ldi	r24, 0x04	; 4
 67e:	8c 93       	st	X, r24
 680:	08 95       	ret
 682:	64 ff       	sbrs	r22, 4
 684:	03 c0       	rjmp	.+6      	; 0x68c <__unpack_f+0xbe>
 686:	81 e0       	ldi	r24, 0x01	; 1
 688:	8c 93       	st	X, r24
 68a:	12 c0       	rjmp	.+36     	; 0x6b0 <__unpack_f+0xe2>
 68c:	1c 92       	st	X, r1
 68e:	10 c0       	rjmp	.+32     	; 0x6b0 <__unpack_f+0xe2>
 690:	2f 57       	subi	r18, 0x7F	; 127
 692:	30 40       	sbci	r19, 0x00	; 0
 694:	13 96       	adiw	r26, 0x03	; 3
 696:	3c 93       	st	X, r19
 698:	2e 93       	st	-X, r18
 69a:	12 97       	sbiw	r26, 0x02	; 2
 69c:	83 e0       	ldi	r24, 0x03	; 3
 69e:	8c 93       	st	X, r24
 6a0:	87 e0       	ldi	r24, 0x07	; 7
 6a2:	44 0f       	add	r20, r20
 6a4:	55 1f       	adc	r21, r21
 6a6:	66 1f       	adc	r22, r22
 6a8:	77 1f       	adc	r23, r23
 6aa:	8a 95       	dec	r24
 6ac:	d1 f7       	brne	.-12     	; 0x6a2 <__unpack_f+0xd4>
 6ae:	70 64       	ori	r23, 0x40	; 64
 6b0:	14 96       	adiw	r26, 0x04	; 4
 6b2:	4d 93       	st	X+, r20
 6b4:	5d 93       	st	X+, r21
 6b6:	6d 93       	st	X+, r22
 6b8:	7c 93       	st	X, r23
 6ba:	17 97       	sbiw	r26, 0x07	; 7
 6bc:	08 95       	ret

000006be <__udivmodqi4>:
 6be:	99 1b       	sub	r25, r25
 6c0:	79 e0       	ldi	r23, 0x09	; 9
 6c2:	04 c0       	rjmp	.+8      	; 0x6cc <__udivmodqi4_ep>

000006c4 <__udivmodqi4_loop>:
 6c4:	99 1f       	adc	r25, r25
 6c6:	96 17       	cp	r25, r22
 6c8:	08 f0       	brcs	.+2      	; 0x6cc <__udivmodqi4_ep>
 6ca:	96 1b       	sub	r25, r22

000006cc <__udivmodqi4_ep>:
 6cc:	88 1f       	adc	r24, r24
 6ce:	7a 95       	dec	r23
 6d0:	c9 f7       	brne	.-14     	; 0x6c4 <__udivmodqi4_loop>
 6d2:	80 95       	com	r24
 6d4:	08 95       	ret

000006d6 <__prologue_saves__>:
 6d6:	2f 92       	push	r2
 6d8:	3f 92       	push	r3
 6da:	4f 92       	push	r4
 6dc:	5f 92       	push	r5
 6de:	6f 92       	push	r6
 6e0:	7f 92       	push	r7
 6e2:	8f 92       	push	r8
 6e4:	9f 92       	push	r9
 6e6:	af 92       	push	r10
 6e8:	bf 92       	push	r11
 6ea:	cf 92       	push	r12
 6ec:	df 92       	push	r13
 6ee:	ef 92       	push	r14
 6f0:	ff 92       	push	r15
 6f2:	0f 93       	push	r16
 6f4:	1f 93       	push	r17
 6f6:	cf 93       	push	r28
 6f8:	df 93       	push	r29
 6fa:	cd b7       	in	r28, 0x3d	; 61
 6fc:	de b7       	in	r29, 0x3e	; 62
 6fe:	ca 1b       	sub	r28, r26
 700:	db 0b       	sbc	r29, r27
 702:	0f b6       	in	r0, 0x3f	; 63
 704:	f8 94       	cli
 706:	de bf       	out	0x3e, r29	; 62
 708:	0f be       	out	0x3f, r0	; 63
 70a:	cd bf       	out	0x3d, r28	; 61
 70c:	19 94       	eijmp

0000070e <__epilogue_restores__>:
 70e:	2a 88       	ldd	r2, Y+18	; 0x12
 710:	39 88       	ldd	r3, Y+17	; 0x11
 712:	48 88       	ldd	r4, Y+16	; 0x10
 714:	5f 84       	ldd	r5, Y+15	; 0x0f
 716:	6e 84       	ldd	r6, Y+14	; 0x0e
 718:	7d 84       	ldd	r7, Y+13	; 0x0d
 71a:	8c 84       	ldd	r8, Y+12	; 0x0c
 71c:	9b 84       	ldd	r9, Y+11	; 0x0b
 71e:	aa 84       	ldd	r10, Y+10	; 0x0a
 720:	b9 84       	ldd	r11, Y+9	; 0x09
 722:	c8 84       	ldd	r12, Y+8	; 0x08
 724:	df 80       	ldd	r13, Y+7	; 0x07
 726:	ee 80       	ldd	r14, Y+6	; 0x06
 728:	fd 80       	ldd	r15, Y+5	; 0x05
 72a:	0c 81       	ldd	r16, Y+4	; 0x04
 72c:	1b 81       	ldd	r17, Y+3	; 0x03
 72e:	aa 81       	ldd	r26, Y+2	; 0x02
 730:	b9 81       	ldd	r27, Y+1	; 0x01
 732:	ce 0f       	add	r28, r30
 734:	d1 1d       	adc	r29, r1
 736:	0f b6       	in	r0, 0x3f	; 63
 738:	f8 94       	cli
 73a:	de bf       	out	0x3e, r29	; 62
 73c:	0f be       	out	0x3f, r0	; 63
 73e:	cd bf       	out	0x3d, r28	; 61
 740:	ed 01       	movw	r28, r26
 742:	08 95       	ret

00000744 <_exit>:
 744:	f8 94       	cli

00000746 <__stop_program>:
 746:	ff cf       	rjmp	.-2      	; 0x746 <__stop_program>
