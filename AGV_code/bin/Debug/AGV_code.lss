
bin\Debug\AGV_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b8  00800200  0000080e  000008c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000080e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  008002b8  008002b8  0000097a  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  0000097a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000040  00000000  00000000  0000097d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000011a  00000000  00000000  000009bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000046c  00000000  00000000  00000ad7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000242  00000000  00000000  00000f43  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000632  00000000  00000000  00001185  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e0  00000000  00000000  000017b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001be  00000000  00000000  00001898  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000493  00000000  00000000  00001a56  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee e0       	ldi	r30, 0x0E	; 14
  fc:	f8 e0       	ldi	r31, 0x08	; 8
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 3b       	cpi	r26, 0xB8	; 184
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	12 e0       	ldi	r17, 0x02	; 2
 110:	a8 eb       	ldi	r26, 0xB8	; 184
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	aa 3b       	cpi	r26, 0xBA	; 186
 11a:	b1 07       	cpc	r27, r17
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 2b 02 	call	0x456	; 0x456 <main>
 122:	0c 94 05 04 	jmp	0x80a	; 0x80a <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <MagnometerRead>:




int MagnometerRead()
{
 12a:	df 93       	push	r29
 12c:	cf 93       	push	r28
 12e:	0f 92       	push	r0
 130:	0f 92       	push	r0
 132:	cd b7       	in	r28, 0x3d	; 61
 134:	de b7       	in	r29, 0x3e	; 62
    // Initialize variables------------------------------------
    int hal1;
    int hal2;
    int angle;
    volatile int timeout=0;
 136:	1a 82       	std	Y+2, r1	; 0x02
 138:	19 82       	std	Y+1, r1	; 0x01
    //---------------------------------------------------------


    // Switch the ADC to the correct pin and read data---------
    ADMUX  = (ADMUX | (1<<MUX1)|(1<<MUX2)) & ~(1<<MUX0);                // PIN selection (A6)
 13a:	6c e7       	ldi	r22, 0x7C	; 124
 13c:	70 e0       	ldi	r23, 0x00	; 0
 13e:	db 01       	movw	r26, r22
 140:	8c 91       	ld	r24, X
 142:	88 7f       	andi	r24, 0xF8	; 248
 144:	86 60       	ori	r24, 0x06	; 6
 146:	8c 93       	st	X, r24
    ADCSRA |= (1 << ADSC);                                              // Start the conversion
 148:	ea e7       	ldi	r30, 0x7A	; 122
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	80 64       	ori	r24, 0x40	; 64
 150:	80 83       	st	Z, r24
    while ( (ADCSRA & (1 << ADSC)) == 1 && timeout++<(ADC_Tout/2) );    // Wait until conversion is finished
 152:	80 81       	ld	r24, Z
    hal1 = (ADCH);                                                      // ADC data is left aligned and can be read from ADCH directly as an 8 bit value
 154:	29 e7       	ldi	r18, 0x79	; 121
 156:	30 e0       	ldi	r19, 0x00	; 0
 158:	d9 01       	movw	r26, r18
 15a:	8c 91       	ld	r24, X
 15c:	48 2f       	mov	r20, r24
 15e:	50 e0       	ldi	r21, 0x00	; 0
                                                                        // Because ADC value is an 8 bit value overflow is impossible

    ADMUX  = (ADMUX | (1<<MUX0)|(1<<MUX1)|(1<<MUX2));                   // PIN selection (A7)
 160:	db 01       	movw	r26, r22
 162:	8c 91       	ld	r24, X
 164:	87 60       	ori	r24, 0x07	; 7
 166:	8c 93       	st	X, r24
    ADCSRA |= (1 << ADSC);                                              // Start the conversion
 168:	80 81       	ld	r24, Z
 16a:	80 64       	ori	r24, 0x40	; 64
 16c:	80 83       	st	Z, r24
    while ( (ADCSRA & (1 << ADSC)) == 1 && timeout++<(ADC_Tout/2) );    // Wait until conversion is finished
 16e:	e0 81       	ld	r30, Z
    hal2 = (ADCH);                                                      // ADC data is left aligned and can be read from ADCH directly as an 8 bit value
 170:	f9 01       	movw	r30, r18
 172:	80 81       	ld	r24, Z
 174:	90 e0       	ldi	r25, 0x00	; 0
    //---------------------------------------------------------         // Because ADC value is an 8 bit value overflow is impossible


    //-compare the data-----------
    if( (hal1 > hal2) && (hal1 >= AOP00) )angle = 0;
    if( (hal1 > hal2) && (hal1 <  AOP18) )angle = 180;
 176:	84 17       	cp	r24, r20
 178:	95 07       	cpc	r25, r21
 17a:	34 f4       	brge	.+12     	; 0x188 <MagnometerRead+0x5e>
 17c:	44 36       	cpi	r20, 0x64	; 100
 17e:	51 05       	cpc	r21, r1
 180:	1c f4       	brge	.+6      	; 0x188 <MagnometerRead+0x5e>
 182:	24 eb       	ldi	r18, 0xB4	; 180
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	02 c0       	rjmp	.+4      	; 0x18c <MagnometerRead+0x62>
 188:	20 e0       	ldi	r18, 0x00	; 0
 18a:	30 e0       	ldi	r19, 0x00	; 0
    if( (hal1 < hal2) && (hal2 >= AOP90) )angle = 90;
 18c:	48 17       	cp	r20, r24
 18e:	59 07       	cpc	r21, r25
 190:	44 f4       	brge	.+16     	; 0x1a2 <MagnometerRead+0x78>
 192:	84 36       	cpi	r24, 0x64	; 100
 194:	91 05       	cpc	r25, r1
 196:	1c f4       	brge	.+6      	; 0x19e <MagnometerRead+0x74>
 198:	2e e0       	ldi	r18, 0x0E	; 14
 19a:	31 e0       	ldi	r19, 0x01	; 1
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <MagnometerRead+0x78>
 19e:	2a e5       	ldi	r18, 0x5A	; 90
 1a0:	30 e0       	ldi	r19, 0x00	; 0
    if( (hal1 < hal2) && (hal2 <  AOP27) )angle = 270;
    //----------------------------

    return angle;
}
 1a2:	82 2f       	mov	r24, r18
 1a4:	93 2f       	mov	r25, r19
 1a6:	0f 90       	pop	r0
 1a8:	0f 90       	pop	r0
 1aa:	cf 91       	pop	r28
 1ac:	df 91       	pop	r29
 1ae:	08 95       	ret

000001b0 <ColorSensorRead>:




int ColorSensorRead(int sensor)
{
 1b0:	ef 92       	push	r14
 1b2:	ff 92       	push	r15
 1b4:	0f 93       	push	r16
 1b6:	1f 93       	push	r17
 1b8:	df 93       	push	r29
 1ba:	cf 93       	push	r28
 1bc:	00 d0       	rcall	.+0      	; 0x1be <ColorSensorRead+0xe>
 1be:	0f 92       	push	r0
 1c0:	cd b7       	in	r28, 0x3d	; 61
 1c2:	de b7       	in	r29, 0x3e	; 62
 1c4:	8c 01       	movw	r16, r24
    // Initialize variables------------------------------------
    volatile int width=0;
 1c6:	1a 82       	std	Y+2, r1	; 0x02
 1c8:	19 82       	std	Y+1, r1	; 0x01
 1ca:	ee 24       	eor	r14, r14
 1cc:	ff 24       	eor	r15, r15
        volatile int timeout=0;
        //-----------------------------------------------------


        // Wait until pin turns high then measure pulse width--
        while( (TCS3200G_L) && (sensor == 0) && (timeout++<TCS_Tout) );         // Wait for pin to turn low to prevent possible error
 1ce:	e9 e0       	ldi	r30, 0x09	; 9
 1d0:	f1 e0       	ldi	r31, 0x01	; 1


    for(X=0; X<10; X++)
    {
        //Create a timeout variable for error detection--------
        volatile int timeout=0;
 1d2:	1c 82       	std	Y+4, r1	; 0x04
 1d4:	1b 82       	std	Y+3, r1	; 0x03
        //-----------------------------------------------------


        // Wait until pin turns high then measure pulse width--
        while( (TCS3200G_L) && (sensor == 0) && (timeout++<TCS_Tout) );         // Wait for pin to turn low to prevent possible error
 1d6:	80 81       	ld	r24, Z
 1d8:	85 ff       	sbrs	r24, 5
 1da:	0c c0       	rjmp	.+24     	; 0x1f4 <ColorSensorRead+0x44>
 1dc:	01 15       	cp	r16, r1
 1de:	11 05       	cpc	r17, r1
 1e0:	49 f4       	brne	.+18     	; 0x1f4 <ColorSensorRead+0x44>
 1e2:	2b 81       	ldd	r18, Y+3	; 0x03
 1e4:	3c 81       	ldd	r19, Y+4	; 0x04
 1e6:	c9 01       	movw	r24, r18
 1e8:	01 96       	adiw	r24, 0x01	; 1
 1ea:	9c 83       	std	Y+4, r25	; 0x04
 1ec:	8b 83       	std	Y+3, r24	; 0x03
 1ee:	20 5d       	subi	r18, 0xD0	; 208
 1f0:	37 40       	sbci	r19, 0x07	; 7
 1f2:	8c f3       	brlt	.-30     	; 0x1d6 <ColorSensorRead+0x26>
        while(!(TCS3200G_L) && (sensor == 0) && (timeout++<TCS_Tout) );         // wait out the Low period
 1f4:	80 81       	ld	r24, Z
 1f6:	85 fd       	sbrc	r24, 5
 1f8:	0c c0       	rjmp	.+24     	; 0x212 <ColorSensorRead+0x62>
 1fa:	01 15       	cp	r16, r1
 1fc:	11 05       	cpc	r17, r1
 1fe:	49 f4       	brne	.+18     	; 0x212 <ColorSensorRead+0x62>
 200:	2b 81       	ldd	r18, Y+3	; 0x03
 202:	3c 81       	ldd	r19, Y+4	; 0x04
 204:	c9 01       	movw	r24, r18
 206:	01 96       	adiw	r24, 0x01	; 1
 208:	9c 83       	std	Y+4, r25	; 0x04
 20a:	8b 83       	std	Y+3, r24	; 0x03
 20c:	20 5d       	subi	r18, 0xD0	; 208
 20e:	37 40       	sbci	r19, 0x07	; 7
 210:	8c f3       	brlt	.-30     	; 0x1f4 <ColorSensorRead+0x44>
        while( (TCS3200G_L) && (sensor == 0) && (timeout++<TCS_Tout) )width++;  // Measure the pulse width
 212:	80 81       	ld	r24, Z
 214:	85 ff       	sbrs	r24, 5
 216:	1d c0       	rjmp	.+58     	; 0x252 <ColorSensorRead+0xa2>
 218:	01 15       	cp	r16, r1
 21a:	11 05       	cpc	r17, r1
 21c:	d1 f4       	brne	.+52     	; 0x252 <ColorSensorRead+0xa2>
 21e:	2b 81       	ldd	r18, Y+3	; 0x03
 220:	3c 81       	ldd	r19, Y+4	; 0x04
 222:	c9 01       	movw	r24, r18
 224:	01 96       	adiw	r24, 0x01	; 1
 226:	9c 83       	std	Y+4, r25	; 0x04
 228:	8b 83       	std	Y+3, r24	; 0x03
 22a:	20 5d       	subi	r18, 0xD0	; 208
 22c:	37 40       	sbci	r19, 0x07	; 7
 22e:	8c f4       	brge	.+34     	; 0x252 <ColorSensorRead+0xa2>
 230:	89 81       	ldd	r24, Y+1	; 0x01
 232:	9a 81       	ldd	r25, Y+2	; 0x02
 234:	01 96       	adiw	r24, 0x01	; 1
 236:	9a 83       	std	Y+2, r25	; 0x02
 238:	89 83       	std	Y+1, r24	; 0x01
 23a:	80 81       	ld	r24, Z
 23c:	85 ff       	sbrs	r24, 5
 23e:	09 c0       	rjmp	.+18     	; 0x252 <ColorSensorRead+0xa2>
 240:	2b 81       	ldd	r18, Y+3	; 0x03
 242:	3c 81       	ldd	r19, Y+4	; 0x04
 244:	c9 01       	movw	r24, r18
 246:	01 96       	adiw	r24, 0x01	; 1
 248:	9c 83       	std	Y+4, r25	; 0x04
 24a:	8b 83       	std	Y+3, r24	; 0x03
 24c:	20 5d       	subi	r18, 0xD0	; 208
 24e:	37 40       	sbci	r19, 0x07	; 7
 250:	7c f3       	brlt	.-34     	; 0x230 <ColorSensorRead+0x80>

        while( (TCS3200G_R) && (sensor == 1) && (timeout++<TCS_Tout) );         // Wait for pin to turn low to prevent possible error
 252:	80 81       	ld	r24, Z
 254:	83 ff       	sbrs	r24, 3
 256:	0c c0       	rjmp	.+24     	; 0x270 <ColorSensorRead+0xc0>
 258:	01 30       	cpi	r16, 0x01	; 1
 25a:	11 05       	cpc	r17, r1
 25c:	49 f4       	brne	.+18     	; 0x270 <ColorSensorRead+0xc0>
 25e:	2b 81       	ldd	r18, Y+3	; 0x03
 260:	3c 81       	ldd	r19, Y+4	; 0x04
 262:	c9 01       	movw	r24, r18
 264:	01 96       	adiw	r24, 0x01	; 1
 266:	9c 83       	std	Y+4, r25	; 0x04
 268:	8b 83       	std	Y+3, r24	; 0x03
 26a:	20 5d       	subi	r18, 0xD0	; 208
 26c:	37 40       	sbci	r19, 0x07	; 7
 26e:	8c f3       	brlt	.-30     	; 0x252 <ColorSensorRead+0xa2>
        while(!(TCS3200G_R) && (sensor == 1) && (timeout++<TCS_Tout) );         // wait out the Low period
 270:	80 81       	ld	r24, Z
 272:	83 fd       	sbrc	r24, 3
 274:	0c c0       	rjmp	.+24     	; 0x28e <ColorSensorRead+0xde>
 276:	01 30       	cpi	r16, 0x01	; 1
 278:	11 05       	cpc	r17, r1
 27a:	49 f4       	brne	.+18     	; 0x28e <ColorSensorRead+0xde>
 27c:	2b 81       	ldd	r18, Y+3	; 0x03
 27e:	3c 81       	ldd	r19, Y+4	; 0x04
 280:	c9 01       	movw	r24, r18
 282:	01 96       	adiw	r24, 0x01	; 1
 284:	9c 83       	std	Y+4, r25	; 0x04
 286:	8b 83       	std	Y+3, r24	; 0x03
 288:	20 5d       	subi	r18, 0xD0	; 208
 28a:	37 40       	sbci	r19, 0x07	; 7
 28c:	8c f3       	brlt	.-30     	; 0x270 <ColorSensorRead+0xc0>
        while( (TCS3200G_R) && (sensor == 1) && (timeout++<TCS_Tout) )width++;  // Measure the pulse width
 28e:	80 81       	ld	r24, Z
 290:	83 ff       	sbrs	r24, 3
 292:	1d c0       	rjmp	.+58     	; 0x2ce <ColorSensorRead+0x11e>
 294:	01 30       	cpi	r16, 0x01	; 1
 296:	11 05       	cpc	r17, r1
 298:	d1 f4       	brne	.+52     	; 0x2ce <ColorSensorRead+0x11e>
 29a:	2b 81       	ldd	r18, Y+3	; 0x03
 29c:	3c 81       	ldd	r19, Y+4	; 0x04
 29e:	c9 01       	movw	r24, r18
 2a0:	01 96       	adiw	r24, 0x01	; 1
 2a2:	9c 83       	std	Y+4, r25	; 0x04
 2a4:	8b 83       	std	Y+3, r24	; 0x03
 2a6:	20 5d       	subi	r18, 0xD0	; 208
 2a8:	37 40       	sbci	r19, 0x07	; 7
 2aa:	8c f4       	brge	.+34     	; 0x2ce <ColorSensorRead+0x11e>
 2ac:	89 81       	ldd	r24, Y+1	; 0x01
 2ae:	9a 81       	ldd	r25, Y+2	; 0x02
 2b0:	01 96       	adiw	r24, 0x01	; 1
 2b2:	9a 83       	std	Y+2, r25	; 0x02
 2b4:	89 83       	std	Y+1, r24	; 0x01
 2b6:	80 81       	ld	r24, Z
 2b8:	83 ff       	sbrs	r24, 3
 2ba:	09 c0       	rjmp	.+18     	; 0x2ce <ColorSensorRead+0x11e>
 2bc:	2b 81       	ldd	r18, Y+3	; 0x03
 2be:	3c 81       	ldd	r19, Y+4	; 0x04
 2c0:	c9 01       	movw	r24, r18
 2c2:	01 96       	adiw	r24, 0x01	; 1
 2c4:	9c 83       	std	Y+4, r25	; 0x04
 2c6:	8b 83       	std	Y+3, r24	; 0x03
 2c8:	20 5d       	subi	r18, 0xD0	; 208
 2ca:	37 40       	sbci	r19, 0x07	; 7
 2cc:	7c f3       	brlt	.-34     	; 0x2ac <ColorSensorRead+0xfc>
        //-----------------------------------------------------


        if( timeout == TCS_Tout )   // Catch a timeout scenario and end the function early returning a 0 to the program
 2ce:	8b 81       	ldd	r24, Y+3	; 0x03
 2d0:	9c 81       	ldd	r25, Y+4	; 0x04
 2d2:	80 5d       	subi	r24, 0xD0	; 208
 2d4:	97 40       	sbci	r25, 0x07	; 7
 2d6:	c1 f4       	brne	.+48     	; 0x308 <ColorSensorRead+0x158>
        {
            // Display error code with data and return 0 for error-
            printString("warning TCS ");
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	92 e0       	ldi	r25, 0x02	; 2
 2dc:	0e 94 5f 03 	call	0x6be	; 0x6be <printString>
            printByte(sensor);
 2e0:	80 2f       	mov	r24, r16
 2e2:	0e 94 a0 03 	call	0x740	; 0x740 <printByte>
            printString(" out of boundaries after: ");
 2e6:	8d e0       	ldi	r24, 0x0D	; 13
 2e8:	92 e0       	ldi	r25, 0x02	; 2
 2ea:	0e 94 5f 03 	call	0x6be	; 0x6be <printString>
            printByte(X);
 2ee:	8e 2d       	mov	r24, r14
 2f0:	0e 94 a0 03 	call	0x740	; 0x740 <printByte>
            printString(" runs");
 2f4:	88 e2       	ldi	r24, 0x28	; 40
 2f6:	92 e0       	ldi	r25, 0x02	; 2
 2f8:	0e 94 5f 03 	call	0x6be	; 0x6be <printString>
            transmitByte('\n');
 2fc:	8a e0       	ldi	r24, 0x0A	; 10
 2fe:	0e 94 4e 03 	call	0x69c	; 0x69c <transmitByte>
 302:	20 e0       	ldi	r18, 0x00	; 0
 304:	30 e0       	ldi	r19, 0x00	; 0
 306:	15 c0       	rjmp	.+42     	; 0x332 <ColorSensorRead+0x182>
    volatile int width=0;
    int X;
    //---------------------------------------------------------


    for(X=0; X<10; X++)
 308:	08 94       	sec
 30a:	e1 1c       	adc	r14, r1
 30c:	f1 1c       	adc	r15, r1
 30e:	8a e0       	ldi	r24, 0x0A	; 10
 310:	e8 16       	cp	r14, r24
 312:	f1 04       	cpc	r15, r1
 314:	09 f0       	breq	.+2      	; 0x318 <ColorSensorRead+0x168>
 316:	5d cf       	rjmp	.-326    	; 0x1d2 <ColorSensorRead+0x22>
        }
        //-----------------------------------------------------
    }

    //Calculate the standard deviation based on a desired value of TCS_Aval and reject if more than TCS_max_s
    if(sqrt((width-TCS_Aval*X)^2 /(X-1))>TCS_Max_s && (testmode != 1)){
 318:	89 81       	ldd	r24, Y+1	; 0x01
 31a:	9a 81       	ldd	r25, Y+2	; 0x02
       }



    //Take the average value of the measurements rounding down--
    width = width / X;
 31c:	89 81       	ldd	r24, Y+1	; 0x01
 31e:	9a 81       	ldd	r25, Y+2	; 0x02
 320:	b7 01       	movw	r22, r14
 322:	0e 94 de 03 	call	0x7bc	; 0x7bc <__divmodhi4>
 326:	86 2f       	mov	r24, r22
 328:	97 2f       	mov	r25, r23
 32a:	9a 83       	std	Y+2, r25	; 0x02
 32c:	89 83       	std	Y+1, r24	; 0x01
    //---------------------------------------------------------



    return width; // Return value
 32e:	29 81       	ldd	r18, Y+1	; 0x01
 330:	3a 81       	ldd	r19, Y+2	; 0x02
}
 332:	82 2f       	mov	r24, r18
 334:	93 2f       	mov	r25, r19
 336:	0f 90       	pop	r0
 338:	0f 90       	pop	r0
 33a:	0f 90       	pop	r0
 33c:	0f 90       	pop	r0
 33e:	cf 91       	pop	r28
 340:	df 91       	pop	r29
 342:	1f 91       	pop	r17
 344:	0f 91       	pop	r16
 346:	ff 90       	pop	r15
 348:	ef 90       	pop	r14
 34a:	08 95       	ret

0000034c <IRDistanceRead>:
}



int IRDistanceRead(int sensor)
{
 34c:	df 93       	push	r29
 34e:	cf 93       	push	r28
 350:	0f 92       	push	r0
 352:	0f 92       	push	r0
 354:	cd b7       	in	r28, 0x3d	; 61
 356:	de b7       	in	r29, 0x3e	; 62
 358:	9c 01       	movw	r18, r24
    // Initialize variables------------------------------------
    int distance=0;
    volatile int timeout=0;
 35a:	1a 82       	std	Y+2, r1	; 0x02
 35c:	19 82       	std	Y+1, r1	; 0x01
    int X;
    //---------------------------------------------------------

    ADMUX  = ((ADMUX) & 0b11100000);
 35e:	ec e7       	ldi	r30, 0x7C	; 124
 360:	f0 e0       	ldi	r31, 0x00	; 0
 362:	80 81       	ld	r24, Z
 364:	80 7e       	andi	r24, 0xE0	; 224
 366:	80 83       	st	Z, r24
    // Switch the ADC to the correct pin-----------------------
    switch (sensor)
 368:	21 30       	cpi	r18, 0x01	; 1
 36a:	31 05       	cpc	r19, r1
 36c:	99 f0       	breq	.+38     	; 0x394 <IRDistanceRead+0x48>
 36e:	22 30       	cpi	r18, 0x02	; 2
 370:	31 05       	cpc	r19, r1
 372:	d1 f0       	breq	.+52     	; 0x3a8 <IRDistanceRead+0x5c>
 374:	23 2b       	or	r18, r19
 376:	29 f0       	breq	.+10     	; 0x382 <IRDistanceRead+0x36>
 378:	40 e0       	ldi	r20, 0x00	; 0
 37a:	50 e0       	ldi	r21, 0x00	; 0
 37c:	20 e0       	ldi	r18, 0x00	; 0
 37e:	30 e0       	ldi	r19, 0x00	; 0
 380:	1c c0       	rjmp	.+56     	; 0x3ba <IRDistanceRead+0x6e>
    {
    case 0:                                                     // Set pin A0 as read pin
        ADMUX  = (ADMUX | (0b00000000));    // PIN selection
 382:	ec e7       	ldi	r30, 0x7C	; 124
 384:	f0 e0       	ldi	r31, 0x00	; 0
 386:	80 81       	ld	r24, Z
 388:	80 83       	st	Z, r24
 38a:	40 e0       	ldi	r20, 0x00	; 0
 38c:	50 e0       	ldi	r21, 0x00	; 0
 38e:	20 e0       	ldi	r18, 0x00	; 0
 390:	30 e0       	ldi	r19, 0x00	; 0
 392:	13 c0       	rjmp	.+38     	; 0x3ba <IRDistanceRead+0x6e>
        break;

    case 1:                                                     // Set pin A2 as read pin
        ADMUX  = (ADMUX | (0b00000010));  // PIN selection
 394:	ec e7       	ldi	r30, 0x7C	; 124
 396:	f0 e0       	ldi	r31, 0x00	; 0
 398:	80 81       	ld	r24, Z
 39a:	82 60       	ori	r24, 0x02	; 2
 39c:	80 83       	st	Z, r24
 39e:	40 e0       	ldi	r20, 0x00	; 0
 3a0:	50 e0       	ldi	r21, 0x00	; 0
 3a2:	20 e0       	ldi	r18, 0x00	; 0
 3a4:	30 e0       	ldi	r19, 0x00	; 0
 3a6:	09 c0       	rjmp	.+18     	; 0x3ba <IRDistanceRead+0x6e>
        break;

    case 2:                                                     // Set pin A4 as read pin
        ADMUX  = (ADMUX | (0b00000100));  // PIN selection
 3a8:	ec e7       	ldi	r30, 0x7C	; 124
 3aa:	f0 e0       	ldi	r31, 0x00	; 0
 3ac:	80 81       	ld	r24, Z
 3ae:	84 60       	ori	r24, 0x04	; 4
 3b0:	80 83       	st	Z, r24
 3b2:	40 e0       	ldi	r20, 0x00	; 0
 3b4:	50 e0       	ldi	r21, 0x00	; 0
 3b6:	20 e0       	ldi	r18, 0x00	; 0
 3b8:	30 e0       	ldi	r19, 0x00	; 0
    //---------------------------------------------------------

    // Take measurements with the ADC and collect the average--
    for(X=0; X<5; X++)
    {
        ADCSRA |= (1 << ADSC);                                              // Start the conversion
 3ba:	ea e7       	ldi	r30, 0x7A	; 122
 3bc:	f0 e0       	ldi	r31, 0x00	; 0
        while ( (ADCSRA & (1 << ADSC)) == 1 && timeout++<(ADC_Tout/2) );    // Wait until conversion is finished
        distance += (ADCH);                                                 // ADC data is left aligned and can be read from ADCH directly as an 8 bit value
 3be:	a9 e7       	ldi	r26, 0x79	; 121
 3c0:	b0 e0       	ldi	r27, 0x00	; 0
    //---------------------------------------------------------

    // Take measurements with the ADC and collect the average--
    for(X=0; X<5; X++)
    {
        ADCSRA |= (1 << ADSC);                                              // Start the conversion
 3c2:	80 81       	ld	r24, Z
 3c4:	80 64       	ori	r24, 0x40	; 64
 3c6:	80 83       	st	Z, r24
        while ( (ADCSRA & (1 << ADSC)) == 1 && timeout++<(ADC_Tout/2) );    // Wait until conversion is finished
 3c8:	80 81       	ld	r24, Z
        distance += (ADCH);                                                 // ADC data is left aligned and can be read from ADCH directly as an 8 bit value
 3ca:	8c 91       	ld	r24, X
 3cc:	48 0f       	add	r20, r24
 3ce:	51 1d       	adc	r21, r1
        break;
    }
    //---------------------------------------------------------

    // Take measurements with the ADC and collect the average--
    for(X=0; X<5; X++)
 3d0:	2f 5f       	subi	r18, 0xFF	; 255
 3d2:	3f 4f       	sbci	r19, 0xFF	; 255
 3d4:	25 30       	cpi	r18, 0x05	; 5
 3d6:	31 05       	cpc	r19, r1
 3d8:	a1 f7       	brne	.-24     	; 0x3c2 <IRDistanceRead+0x76>
    }                                                                       // Because ADC value is an 8 bit value overflow is impossible
    //---------------------------------------------------------


    // If a timeout occurs attempt to retry the measurement----
    if( timeout == ADC_Tout/2 )
 3da:	89 81       	ldd	r24, Y+1	; 0x01
 3dc:	9a 81       	ldd	r25, Y+2	; 0x02
 3de:	88 5e       	subi	r24, 0xE8	; 232
 3e0:	93 40       	sbci	r25, 0x03	; 3
 3e2:	51 f5       	brne	.+84     	; 0x438 <IRDistanceRead+0xec>
    {
        printString("warning ADC out of boundaries retrying");
 3e4:	8e e2       	ldi	r24, 0x2E	; 46
 3e6:	92 e0       	ldi	r25, 0x02	; 2
 3e8:	0e 94 5f 03 	call	0x6be	; 0x6be <printString>
        transmitByte('\n');
 3ec:	8a e0       	ldi	r24, 0x0A	; 10
 3ee:	0e 94 4e 03 	call	0x69c	; 0x69c <transmitByte>
 3f2:	40 e0       	ldi	r20, 0x00	; 0
 3f4:	50 e0       	ldi	r21, 0x00	; 0
 3f6:	20 e0       	ldi	r18, 0x00	; 0
 3f8:	30 e0       	ldi	r19, 0x00	; 0
        distance=0;
        for(X=0; X<5; X++)
        {
            ADCSRA |= (1 << ADSC);                                          // Start the conversion
 3fa:	ea e7       	ldi	r30, 0x7A	; 122
 3fc:	f0 e0       	ldi	r31, 0x00	; 0
            while ( (ADCSRA & (1 << ADSC)) == 1 && timeout++<(ADC_Tout) );  // Wait until conversion is finished
            distance += (ADCH);                                             // ADC data is left aligned and can be read from ADCH directly as an 8 bit value
 3fe:	a9 e7       	ldi	r26, 0x79	; 121
 400:	b0 e0       	ldi	r27, 0x00	; 0
        printString("warning ADC out of boundaries retrying");
        transmitByte('\n');
        distance=0;
        for(X=0; X<5; X++)
        {
            ADCSRA |= (1 << ADSC);                                          // Start the conversion
 402:	80 81       	ld	r24, Z
 404:	80 64       	ori	r24, 0x40	; 64
 406:	80 83       	st	Z, r24
            while ( (ADCSRA & (1 << ADSC)) == 1 && timeout++<(ADC_Tout) );  // Wait until conversion is finished
 408:	80 81       	ld	r24, Z
            distance += (ADCH);                                             // ADC data is left aligned and can be read from ADCH directly as an 8 bit value
 40a:	8c 91       	ld	r24, X
 40c:	48 0f       	add	r20, r24
 40e:	51 1d       	adc	r21, r1
    if( timeout == ADC_Tout/2 )
    {
        printString("warning ADC out of boundaries retrying");
        transmitByte('\n');
        distance=0;
        for(X=0; X<5; X++)
 410:	2f 5f       	subi	r18, 0xFF	; 255
 412:	3f 4f       	sbci	r19, 0xFF	; 255
 414:	25 30       	cpi	r18, 0x05	; 5
 416:	31 05       	cpc	r19, r1
 418:	a1 f7       	brne	.-24     	; 0x402 <IRDistanceRead+0xb6>
        {
            ADCSRA |= (1 << ADSC);                                          // Start the conversion
            while ( (ADCSRA & (1 << ADSC)) == 1 && timeout++<(ADC_Tout) );  // Wait until conversion is finished
            distance += (ADCH);                                             // ADC data is left aligned and can be read from ADCH directly as an 8 bit value
        }
        if( timeout == ADC_Tout)                                            // if retry has failed return 0
 41a:	89 81       	ldd	r24, Y+1	; 0x01
 41c:	9a 81       	ldd	r25, Y+2	; 0x02
 41e:	80 5d       	subi	r24, 0xD0	; 208
 420:	97 40       	sbci	r25, 0x07	; 7
 422:	51 f4       	brne	.+20     	; 0x438 <IRDistanceRead+0xec>
        {
            printString("Retry failed");
 424:	85 e5       	ldi	r24, 0x55	; 85
 426:	92 e0       	ldi	r25, 0x02	; 2
 428:	0e 94 5f 03 	call	0x6be	; 0x6be <printString>
            transmitByte('\n');
 42c:	8a e0       	ldi	r24, 0x0A	; 10
 42e:	0e 94 4e 03 	call	0x69c	; 0x69c <transmitByte>
 432:	20 e0       	ldi	r18, 0x00	; 0
 434:	30 e0       	ldi	r19, 0x00	; 0
 436:	08 c0       	rjmp	.+16     	; 0x448 <IRDistanceRead+0xfc>
    }
    //---------------------------------------------------------


    //Take the average value of the measurements rounding down-
    distance = distance / X;
 438:	ca 01       	movw	r24, r20
 43a:	65 e0       	ldi	r22, 0x05	; 5
 43c:	70 e0       	ldi	r23, 0x00	; 0
 43e:	0e 94 de 03 	call	0x7bc	; 0x7bc <__divmodhi4>
 442:	86 2f       	mov	r24, r22
 444:	97 2f       	mov	r25, r23
 446:	9c 01       	movw	r18, r24
    //---------------------------------------------------------

    return distance;
}
 448:	82 2f       	mov	r24, r18
 44a:	93 2f       	mov	r25, r19
 44c:	0f 90       	pop	r0
 44e:	0f 90       	pop	r0
 450:	cf 91       	pop	r28
 452:	df 91       	pop	r29
 454:	08 95       	ret

00000456 <main>:
int IRDistanceRead(int sensor);
int ColorSensorRead(int sensor);


int main(void)
{
 456:	2f 92       	push	r2
 458:	3f 92       	push	r3
 45a:	4f 92       	push	r4
 45c:	5f 92       	push	r5
 45e:	6f 92       	push	r6
 460:	7f 92       	push	r7
 462:	8f 92       	push	r8
 464:	9f 92       	push	r9
 466:	af 92       	push	r10
 468:	bf 92       	push	r11
 46a:	cf 92       	push	r12
 46c:	df 92       	push	r13
 46e:	ef 92       	push	r14
 470:	ff 92       	push	r15
 472:	0f 93       	push	r16
 474:	1f 93       	push	r17
 476:	cf 93       	push	r28
 478:	df 93       	push	r29

//-Initialize ADCs---------
    ADMUX |= (0 << REFS1) |(1 << REFS0)|(1<<ADLAR);     // Voltage reference via capacitor on arduino
 47a:	ec e7       	ldi	r30, 0x7C	; 124
 47c:	f0 e0       	ldi	r31, 0x00	; 0
 47e:	80 81       	ld	r24, Z
 480:	80 66       	ori	r24, 0x60	; 96
 482:	80 83       	st	Z, r24
    ADCSRA |= (1 << ADEN) |(0 << ADIE);                 // ADC enable and ADC conversion complete interrupt disabled
 484:	ea e7       	ldi	r30, 0x7A	; 122
 486:	f0 e0       	ldi	r31, 0x00	; 0
 488:	80 81       	ld	r24, Z
 48a:	80 68       	ori	r24, 0x80	; 128
 48c:	80 83       	st	Z, r24
    ADCSRA |= (1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0);   // Prescaler settings (Currently 128)
 48e:	80 81       	ld	r24, Z
 490:	87 60       	ori	r24, 0x07	; 7
 492:	80 83       	st	Z, r24
    DIDR0 = 0b11111111;                                 // Disable Digital input
 494:	8f ef       	ldi	r24, 0xFF	; 255
 496:	80 93 7e 00 	sts	0x007E, r24
    DIDR2 = 0b11111111;                                 // Disable Digital input
 49a:	80 93 7d 00 	sts	0x007D, r24
    ADCSRA |= (1 << ADSC);                              // Run a single conversion in order to prime the circuit
 49e:	80 81       	ld	r24, Z
 4a0:	80 64       	ori	r24, 0x40	; 64
 4a2:	80 83       	st	Z, r24
//-------------------------

//-Initialize pins---------
    LED_INIT1;
 4a4:	e1 e0       	ldi	r30, 0x01	; 1
 4a6:	f1 e0       	ldi	r31, 0x01	; 1
 4a8:	80 81       	ld	r24, Z
 4aa:	80 66       	ori	r24, 0x60	; 96
 4ac:	80 83       	st	Z, r24
    LED_INIT2;
 4ae:	e4 e2       	ldi	r30, 0x24	; 36
 4b0:	f0 e0       	ldi	r31, 0x00	; 0
 4b2:	80 81       	ld	r24, Z
 4b4:	80 6e       	ori	r24, 0xE0	; 224
 4b6:	80 83       	st	Z, r24
//-------------------------


//-Initialize motors-------
    MotorL_INIT;
 4b8:	80 81       	ld	r24, Z
 4ba:	89 60       	ori	r24, 0x09	; 9
 4bc:	80 83       	st	Z, r24
    MotorR_INIT;
 4be:	ea e0       	ldi	r30, 0x0A	; 10
 4c0:	f1 e0       	ldi	r31, 0x01	; 1
 4c2:	80 81       	ld	r24, Z
 4c4:	84 61       	ori	r24, 0x14	; 20
 4c6:	80 83       	st	Z, r24
//-------------------------


//-Initialize Serial-------
    initUSART();
 4c8:	0e 94 3d 03 	call	0x67a	; 0x67a <initUSART>
//-------------------------


//-zero magnometer---------
    north_angle = MagnometerRead();
 4cc:	0e 94 95 00 	call	0x12a	; 0x12a <MagnometerRead>
 4d0:	90 93 b9 02 	sts	0x02B9, r25
 4d4:	80 93 b8 02 	sts	0x02B8, r24
//-------------------------


//-Enable interrupts-------
    sei();
 4d8:	78 94       	sei
int Rwork_done;
int cycles;
//-------------------------

//-End of setup-----------------------------------------]
    printString("RDY");
 4da:	82 e6       	ldi	r24, 0x62	; 98
 4dc:	92 e0       	ldi	r25, 0x02	; 2
 4de:	0e 94 5f 03 	call	0x6be	; 0x6be <printString>
    transmitByte('\n');
 4e2:	8a e0       	ldi	r24, 0x0A	; 10
 4e4:	0e 94 4e 03 	call	0x69c	; 0x69c <transmitByte>


    while(testmode == 1){
    transmitByte('\n');
    // IR sensor diagnostic printing
    if (IR_FL > 0) printString("FL  "); else printString("    ");
 4e8:	06 e2       	ldi	r16, 0x26	; 38
 4ea:	10 e0       	ldi	r17, 0x00	; 0
 4ec:	0f 2e       	mov	r0, r31
 4ee:	fb e6       	ldi	r31, 0x6B	; 107
 4f0:	ef 2e       	mov	r14, r31
 4f2:	f2 e0       	ldi	r31, 0x02	; 2
 4f4:	ff 2e       	mov	r15, r31
 4f6:	f0 2d       	mov	r31, r0
    if (IR_FR2 > 0)printString("FR2 "); else printString("    ");
    if (IR_BL > 0) printString("BL  "); else printString("    ");
    if (IR_BR > 0) printString("BR  "); else printString("    ");

    // button diagnostic printing
    if (Button > 0)         printString("BN ");  else printString("   ");
 4f8:	c0 e2       	ldi	r28, 0x20	; 32
 4fa:	d0 e0       	ldi	r29, 0x00	; 0
 4fc:	0f 2e       	mov	r0, r31
 4fe:	f8 e8       	ldi	r31, 0x88	; 136
 500:	cf 2e       	mov	r12, r31
 502:	f2 e0       	ldi	r31, 0x02	; 2
 504:	df 2e       	mov	r13, r31
 506:	f0 2d       	mov	r31, r0
    // Magnometer Diagnostic printing
    printString(" MAG=");
    printByte(MagnometerRead());

    // Distance sensor Diagnostic printing
    printString(" IR0=");
 508:	0f 2e       	mov	r0, r31
 50a:	fa e9       	ldi	r31, 0x9A	; 154
 50c:	2f 2e       	mov	r2, r31
 50e:	f2 e0       	ldi	r31, 0x02	; 2
 510:	3f 2e       	mov	r3, r31
 512:	f0 2d       	mov	r31, r0
    printByte(IRDistanceRead(0));
    printString(" IR1=");
 514:	0f 2e       	mov	r0, r31
 516:	f0 ea       	ldi	r31, 0xA0	; 160
 518:	4f 2e       	mov	r4, r31
 51a:	f2 e0       	ldi	r31, 0x02	; 2
 51c:	5f 2e       	mov	r5, r31
 51e:	f0 2d       	mov	r31, r0
    printByte(IRDistanceRead(1));
    printString(" IR2=");
 520:	0f 2e       	mov	r0, r31
 522:	f6 ea       	ldi	r31, 0xA6	; 166
 524:	6f 2e       	mov	r6, r31
 526:	f2 e0       	ldi	r31, 0x02	; 2
 528:	7f 2e       	mov	r7, r31
 52a:	f0 2d       	mov	r31, r0
    printByte(IRDistanceRead(2));

    //colorsensor diagnostic printing
    printString(" CL0=");
 52c:	0f 2e       	mov	r0, r31
 52e:	fc ea       	ldi	r31, 0xAC	; 172
 530:	8f 2e       	mov	r8, r31
 532:	f2 e0       	ldi	r31, 0x02	; 2
 534:	9f 2e       	mov	r9, r31
 536:	f0 2d       	mov	r31, r0
    printByte(ColorSensorRead(0));
    printString(" CL1=");
 538:	0f 2e       	mov	r0, r31
 53a:	f2 eb       	ldi	r31, 0xB2	; 178
 53c:	af 2e       	mov	r10, r31
 53e:	f2 e0       	ldi	r31, 0x02	; 2
 540:	bf 2e       	mov	r11, r31
 542:	f0 2d       	mov	r31, r0
    printString("RDY");
    transmitByte('\n');


    while(testmode == 1){
    transmitByte('\n');
 544:	8a e0       	ldi	r24, 0x0A	; 10
 546:	0e 94 4e 03 	call	0x69c	; 0x69c <transmitByte>
    // IR sensor diagnostic printing
    if (IR_FL > 0) printString("FL  "); else printString("    ");
 54a:	f8 01       	movw	r30, r16
 54c:	80 81       	ld	r24, Z
 54e:	85 ff       	sbrs	r24, 5
 550:	05 c0       	rjmp	.+10     	; 0x55c <main+0x106>
 552:	86 e6       	ldi	r24, 0x66	; 102
 554:	92 e0       	ldi	r25, 0x02	; 2
 556:	0e 94 5f 03 	call	0x6be	; 0x6be <printString>
 55a:	03 c0       	rjmp	.+6      	; 0x562 <main+0x10c>
 55c:	c7 01       	movw	r24, r14
 55e:	0e 94 5f 03 	call	0x6be	; 0x6be <printString>
    if (IR_FR1 > 0)printString("FR1 "); else printString("    ");
 562:	f8 01       	movw	r30, r16
 564:	80 81       	ld	r24, Z
 566:	83 ff       	sbrs	r24, 3
 568:	05 c0       	rjmp	.+10     	; 0x574 <main+0x11e>
 56a:	80 e7       	ldi	r24, 0x70	; 112
 56c:	92 e0       	ldi	r25, 0x02	; 2
 56e:	0e 94 5f 03 	call	0x6be	; 0x6be <printString>
 572:	03 c0       	rjmp	.+6      	; 0x57a <main+0x124>
 574:	c7 01       	movw	r24, r14
 576:	0e 94 5f 03 	call	0x6be	; 0x6be <printString>
    if (IR_FR2 > 0)printString("FR2 "); else printString("    ");
 57a:	f8 01       	movw	r30, r16
 57c:	80 81       	ld	r24, Z
 57e:	81 ff       	sbrs	r24, 1
 580:	05 c0       	rjmp	.+10     	; 0x58c <main+0x136>
 582:	85 e7       	ldi	r24, 0x75	; 117
 584:	92 e0       	ldi	r25, 0x02	; 2
 586:	0e 94 5f 03 	call	0x6be	; 0x6be <printString>
 58a:	03 c0       	rjmp	.+6      	; 0x592 <main+0x13c>
 58c:	c7 01       	movw	r24, r14
 58e:	0e 94 5f 03 	call	0x6be	; 0x6be <printString>
    if (IR_BL > 0) printString("BL  "); else printString("    ");
 592:	e2 e3       	ldi	r30, 0x32	; 50
 594:	f0 e0       	ldi	r31, 0x00	; 0
 596:	80 81       	ld	r24, Z
 598:	81 ff       	sbrs	r24, 1
 59a:	05 c0       	rjmp	.+10     	; 0x5a6 <main+0x150>
 59c:	8a e7       	ldi	r24, 0x7A	; 122
 59e:	92 e0       	ldi	r25, 0x02	; 2
 5a0:	0e 94 5f 03 	call	0x6be	; 0x6be <printString>
 5a4:	03 c0       	rjmp	.+6      	; 0x5ac <main+0x156>
 5a6:	c7 01       	movw	r24, r14
 5a8:	0e 94 5f 03 	call	0x6be	; 0x6be <printString>
    if (IR_BR > 0) printString("BR  "); else printString("    ");
 5ac:	e9 e2       	ldi	r30, 0x29	; 41
 5ae:	f0 e0       	ldi	r31, 0x00	; 0
 5b0:	80 81       	ld	r24, Z
 5b2:	87 ff       	sbrs	r24, 7
 5b4:	05 c0       	rjmp	.+10     	; 0x5c0 <main+0x16a>
 5b6:	8f e7       	ldi	r24, 0x7F	; 127
 5b8:	92 e0       	ldi	r25, 0x02	; 2
 5ba:	0e 94 5f 03 	call	0x6be	; 0x6be <printString>
 5be:	03 c0       	rjmp	.+6      	; 0x5c6 <main+0x170>
 5c0:	c7 01       	movw	r24, r14
 5c2:	0e 94 5f 03 	call	0x6be	; 0x6be <printString>

    // button diagnostic printing
    if (Button > 0)         printString("BN ");  else printString("   ");
 5c6:	88 81       	ld	r24, Y
 5c8:	82 ff       	sbrs	r24, 2
 5ca:	05 c0       	rjmp	.+10     	; 0x5d6 <main+0x180>
 5cc:	84 e8       	ldi	r24, 0x84	; 132
 5ce:	92 e0       	ldi	r25, 0x02	; 2
 5d0:	0e 94 5f 03 	call	0x6be	; 0x6be <printString>
 5d4:	03 c0       	rjmp	.+6      	; 0x5dc <main+0x186>
 5d6:	c6 01       	movw	r24, r12
 5d8:	0e 94 5f 03 	call	0x6be	; 0x6be <printString>
    if (Key_switch > 0)     printString("KS ");  else printString("   ");
 5dc:	88 81       	ld	r24, Y
 5de:	84 ff       	sbrs	r24, 4
 5e0:	05 c0       	rjmp	.+10     	; 0x5ec <main+0x196>
 5e2:	8c e8       	ldi	r24, 0x8C	; 140
 5e4:	92 e0       	ldi	r25, 0x02	; 2
 5e6:	0e 94 5f 03 	call	0x6be	; 0x6be <printString>
 5ea:	03 c0       	rjmp	.+6      	; 0x5f2 <main+0x19c>
 5ec:	c6 01       	movw	r24, r12
 5ee:	0e 94 5f 03 	call	0x6be	; 0x6be <printString>
    if (Emergency_Stop > 0) printString("EM ");  else printString("   ");
 5f2:	88 81       	ld	r24, Y
 5f4:	86 ff       	sbrs	r24, 6
 5f6:	05 c0       	rjmp	.+10     	; 0x602 <main+0x1ac>
 5f8:	80 e9       	ldi	r24, 0x90	; 144
 5fa:	92 e0       	ldi	r25, 0x02	; 2
 5fc:	0e 94 5f 03 	call	0x6be	; 0x6be <printString>
 600:	03 c0       	rjmp	.+6      	; 0x608 <main+0x1b2>
 602:	c6 01       	movw	r24, r12
 604:	0e 94 5f 03 	call	0x6be	; 0x6be <printString>

    // Magnometer Diagnostic printing
    printString(" MAG=");
 608:	84 e9       	ldi	r24, 0x94	; 148
 60a:	92 e0       	ldi	r25, 0x02	; 2
 60c:	0e 94 5f 03 	call	0x6be	; 0x6be <printString>
    printByte(MagnometerRead());
 610:	0e 94 95 00 	call	0x12a	; 0x12a <MagnometerRead>
 614:	0e 94 a0 03 	call	0x740	; 0x740 <printByte>

    // Distance sensor Diagnostic printing
    printString(" IR0=");
 618:	c1 01       	movw	r24, r2
 61a:	0e 94 5f 03 	call	0x6be	; 0x6be <printString>
    printByte(IRDistanceRead(0));
 61e:	80 e0       	ldi	r24, 0x00	; 0
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	0e 94 a6 01 	call	0x34c	; 0x34c <IRDistanceRead>
 626:	0e 94 a0 03 	call	0x740	; 0x740 <printByte>
    printString(" IR1=");
 62a:	c2 01       	movw	r24, r4
 62c:	0e 94 5f 03 	call	0x6be	; 0x6be <printString>
    printByte(IRDistanceRead(1));
 630:	81 e0       	ldi	r24, 0x01	; 1
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	0e 94 a6 01 	call	0x34c	; 0x34c <IRDistanceRead>
 638:	0e 94 a0 03 	call	0x740	; 0x740 <printByte>
    printString(" IR2=");
 63c:	c3 01       	movw	r24, r6
 63e:	0e 94 5f 03 	call	0x6be	; 0x6be <printString>
    printByte(IRDistanceRead(2));
 642:	82 e0       	ldi	r24, 0x02	; 2
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	0e 94 a6 01 	call	0x34c	; 0x34c <IRDistanceRead>
 64a:	0e 94 a0 03 	call	0x740	; 0x740 <printByte>

    //colorsensor diagnostic printing
    printString(" CL0=");
 64e:	c4 01       	movw	r24, r8
 650:	0e 94 5f 03 	call	0x6be	; 0x6be <printString>
    printByte(ColorSensorRead(0));
 654:	80 e0       	ldi	r24, 0x00	; 0
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <ColorSensorRead>
 65c:	0e 94 a0 03 	call	0x740	; 0x740 <printByte>
    printString(" CL1=");
 660:	c5 01       	movw	r24, r10
 662:	0e 94 5f 03 	call	0x6be	; 0x6be <printString>
    printByte(ColorSensorRead(1));
 666:	81 e0       	ldi	r24, 0x01	; 1
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <ColorSensorRead>
 66e:	0e 94 a0 03 	call	0x740	; 0x740 <printByte>
    transmitByte('\n');
 672:	8a e0       	ldi	r24, 0x0A	; 10
 674:	0e 94 4e 03 	call	0x69c	; 0x69c <transmitByte>
 678:	65 cf       	rjmp	.-310    	; 0x544 <main+0xee>

0000067a <initUSART>:
#include <avr/io.h>
#include "USART.h"
#include <util/setbaud.h>

void initUSART(void) {                                /* requires BAUD */
  UBRR0H = UBRRH_VALUE;                        /* defined in setbaud.h */
 67a:	10 92 c5 00 	sts	0x00C5, r1
  UBRR0L = UBRRL_VALUE;
 67e:	87 e6       	ldi	r24, 0x67	; 103
 680:	80 93 c4 00 	sts	0x00C4, r24
#if USE_2X
  UCSR0A |= (1 << U2X0);
#else
  UCSR0A &= ~(1 << U2X0);
 684:	e0 ec       	ldi	r30, 0xC0	; 192
 686:	f0 e0       	ldi	r31, 0x00	; 0
 688:	80 81       	ld	r24, Z
 68a:	8d 7f       	andi	r24, 0xFD	; 253
 68c:	80 83       	st	Z, r24
#endif
                                  /* Enable USART transmitter/receiver */
  UCSR0B = (1 << TXEN0) | (1 << RXEN0);
 68e:	88 e1       	ldi	r24, 0x18	; 24
 690:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);   /* 8 data bits, 1 stop bit */
 694:	86 e0       	ldi	r24, 0x06	; 6
 696:	80 93 c2 00 	sts	0x00C2, r24
}
 69a:	08 95       	ret

0000069c <transmitByte>:


void transmitByte(uint8_t data) {
 69c:	98 2f       	mov	r25, r24
                                     /* Wait for empty transmit buffer */
  loop_until_bit_is_set(UCSR0A, UDRE0);
 69e:	e0 ec       	ldi	r30, 0xC0	; 192
 6a0:	f0 e0       	ldi	r31, 0x00	; 0
 6a2:	80 81       	ld	r24, Z
 6a4:	85 ff       	sbrs	r24, 5
 6a6:	fd cf       	rjmp	.-6      	; 0x6a2 <transmitByte+0x6>
  UDR0 = data;                                            /* send data */
 6a8:	90 93 c6 00 	sts	0x00C6, r25
}
 6ac:	08 95       	ret

000006ae <receiveByte>:

uint8_t receiveByte(void) {
  loop_until_bit_is_set(UCSR0A, RXC0);       /* Wait for incoming data */
 6ae:	e0 ec       	ldi	r30, 0xC0	; 192
 6b0:	f0 e0       	ldi	r31, 0x00	; 0
 6b2:	80 81       	ld	r24, Z
 6b4:	88 23       	and	r24, r24
 6b6:	ec f7       	brge	.-6      	; 0x6b2 <receiveByte+0x4>
  return UDR0;                                /* return register value */
 6b8:	80 91 c6 00 	lds	r24, 0x00C6
}
 6bc:	08 95       	ret

000006be <printString>:


                       /* Here are a bunch of useful printing commands */

void printString(const char myString[]) {
 6be:	1f 93       	push	r17
 6c0:	cf 93       	push	r28
 6c2:	df 93       	push	r29
 6c4:	ec 01       	movw	r28, r24
  uint8_t i = 0;
  while (myString[i]) {
 6c6:	88 81       	ld	r24, Y
 6c8:	88 23       	and	r24, r24
 6ca:	51 f0       	breq	.+20     	; 0x6e0 <printString+0x22>
 6cc:	10 e0       	ldi	r17, 0x00	; 0
    transmitByte(myString[i]);
 6ce:	0e 94 4e 03 	call	0x69c	; 0x69c <transmitByte>
    i++;
 6d2:	1f 5f       	subi	r17, 0xFF	; 255

                       /* Here are a bunch of useful printing commands */

void printString(const char myString[]) {
  uint8_t i = 0;
  while (myString[i]) {
 6d4:	fe 01       	movw	r30, r28
 6d6:	e1 0f       	add	r30, r17
 6d8:	f1 1d       	adc	r31, r1
 6da:	80 81       	ld	r24, Z
 6dc:	88 23       	and	r24, r24
 6de:	b9 f7       	brne	.-18     	; 0x6ce <printString+0x10>
    transmitByte(myString[i]);
    i++;
  }
}
 6e0:	df 91       	pop	r29
 6e2:	cf 91       	pop	r28
 6e4:	1f 91       	pop	r17
 6e6:	08 95       	ret

000006e8 <readString>:

void readString(char myString[], uint8_t maxLength) {
 6e8:	ef 92       	push	r14
 6ea:	ff 92       	push	r15
 6ec:	0f 93       	push	r16
 6ee:	1f 93       	push	r17
 6f0:	cf 93       	push	r28
 6f2:	df 93       	push	r29
 6f4:	7c 01       	movw	r14, r24
  char response;
  uint8_t i;
  i = 0;
  while (i < (maxLength - 1)) {                   /* prevent over-runs */
 6f6:	70 e0       	ldi	r23, 0x00	; 0
 6f8:	eb 01       	movw	r28, r22
 6fa:	21 97       	sbiw	r28, 0x01	; 1
 6fc:	1c 16       	cp	r1, r28
 6fe:	1d 06       	cpc	r1, r29
 700:	14 f0       	brlt	.+4      	; 0x706 <readString+0x1e>
 702:	00 e0       	ldi	r16, 0x00	; 0
 704:	12 c0       	rjmp	.+36     	; 0x72a <readString+0x42>
 706:	00 e0       	ldi	r16, 0x00	; 0
    response = receiveByte();
 708:	0e 94 57 03 	call	0x6ae	; 0x6ae <receiveByte>
 70c:	18 2f       	mov	r17, r24
    transmitByte(response);                                    /* echo */
 70e:	0e 94 4e 03 	call	0x69c	; 0x69c <transmitByte>
    if (response == '\r') {                     /* enter marks the end */
 712:	1d 30       	cpi	r17, 0x0D	; 13
 714:	51 f0       	breq	.+20     	; 0x72a <readString+0x42>
      break;
    }
    else {
      myString[i] = response;                       /* add in a letter */
 716:	f7 01       	movw	r30, r14
 718:	e0 0f       	add	r30, r16
 71a:	f1 1d       	adc	r31, r1
 71c:	10 83       	st	Z, r17
      i++;
 71e:	0f 5f       	subi	r16, 0xFF	; 255

void readString(char myString[], uint8_t maxLength) {
  char response;
  uint8_t i;
  i = 0;
  while (i < (maxLength - 1)) {                   /* prevent over-runs */
 720:	80 2f       	mov	r24, r16
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	8c 17       	cp	r24, r28
 726:	9d 07       	cpc	r25, r29
 728:	7c f3       	brlt	.-34     	; 0x708 <readString+0x20>
    else {
      myString[i] = response;                       /* add in a letter */
      i++;
    }
  }
  myString[i] = 0;                          /* terminal NULL character */
 72a:	f7 01       	movw	r30, r14
 72c:	e0 0f       	add	r30, r16
 72e:	f1 1d       	adc	r31, r1
 730:	10 82       	st	Z, r1
}
 732:	df 91       	pop	r29
 734:	cf 91       	pop	r28
 736:	1f 91       	pop	r17
 738:	0f 91       	pop	r16
 73a:	ff 90       	pop	r15
 73c:	ef 90       	pop	r14
 73e:	08 95       	ret

00000740 <printByte>:

void printByte(uint8_t byte) {
 740:	1f 93       	push	r17
 742:	18 2f       	mov	r17, r24
              /* Converts a byte to a string of decimal text, sends it */
  transmitByte('0' + (byte / 100));                        /* Hundreds */
 744:	64 e6       	ldi	r22, 0x64	; 100
 746:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <__udivmodqi4>
 74a:	80 5d       	subi	r24, 0xD0	; 208
 74c:	0e 94 4e 03 	call	0x69c	; 0x69c <transmitByte>
  transmitByte('0' + ((byte / 10) % 10));                      /* Tens */
 750:	81 2f       	mov	r24, r17
 752:	6a e0       	ldi	r22, 0x0A	; 10
 754:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <__udivmodqi4>
 758:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <__udivmodqi4>
 75c:	89 2f       	mov	r24, r25
 75e:	80 5d       	subi	r24, 0xD0	; 208
 760:	0e 94 4e 03 	call	0x69c	; 0x69c <transmitByte>
  transmitByte('0' + (byte % 10));                             /* Ones */
 764:	81 2f       	mov	r24, r17
 766:	6a e0       	ldi	r22, 0x0A	; 10
 768:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <__udivmodqi4>
 76c:	89 2f       	mov	r24, r25
 76e:	80 5d       	subi	r24, 0xD0	; 208
 770:	0e 94 4e 03 	call	0x69c	; 0x69c <transmitByte>
}
 774:	1f 91       	pop	r17
 776:	08 95       	ret

00000778 <nibbleToHexCharacter>:
  transmitByte(nibbleToHexCharacter(nibble));
}

char nibbleToHexCharacter(uint8_t nibble) {
                                   /* Converts 4 bits into hexadecimal */
  if (nibble < 10) {
 778:	8a 30       	cpi	r24, 0x0A	; 10
 77a:	10 f4       	brcc	.+4      	; 0x780 <nibbleToHexCharacter+0x8>
    return ('0' + nibble);
 77c:	80 5d       	subi	r24, 0xD0	; 208
 77e:	08 95       	ret
  }
  else {
    return ('A' + nibble - 10);
 780:	89 5c       	subi	r24, 0xC9	; 201
  }
}
 782:	08 95       	ret

00000784 <printHexByte>:
  transmitByte('0' + (byte / 100));                        /* Hundreds */
  transmitByte('0' + ((byte / 10) % 10));                      /* Tens */
  transmitByte('0' + (byte % 10));                             /* Ones */
}

void printHexByte(uint8_t byte) {
 784:	1f 93       	push	r17
 786:	18 2f       	mov	r17, r24
                        /* Prints a byte as its hexadecimal equivalent */
  uint8_t nibble;
  nibble = (byte & 0b11110000) >> 4;
  transmitByte(nibbleToHexCharacter(nibble));
 788:	82 95       	swap	r24
 78a:	8f 70       	andi	r24, 0x0F	; 15
 78c:	0e 94 bc 03 	call	0x778	; 0x778 <nibbleToHexCharacter>
 790:	0e 94 4e 03 	call	0x69c	; 0x69c <transmitByte>
  nibble = byte & 0b00001111;
  transmitByte(nibbleToHexCharacter(nibble));
 794:	81 2f       	mov	r24, r17
 796:	8f 70       	andi	r24, 0x0F	; 15
 798:	0e 94 bc 03 	call	0x778	; 0x778 <nibbleToHexCharacter>
 79c:	0e 94 4e 03 	call	0x69c	; 0x69c <transmitByte>
}
 7a0:	1f 91       	pop	r17
 7a2:	08 95       	ret

000007a4 <__udivmodqi4>:
 7a4:	99 1b       	sub	r25, r25
 7a6:	79 e0       	ldi	r23, 0x09	; 9
 7a8:	04 c0       	rjmp	.+8      	; 0x7b2 <__udivmodqi4_ep>

000007aa <__udivmodqi4_loop>:
 7aa:	99 1f       	adc	r25, r25
 7ac:	96 17       	cp	r25, r22
 7ae:	08 f0       	brcs	.+2      	; 0x7b2 <__udivmodqi4_ep>
 7b0:	96 1b       	sub	r25, r22

000007b2 <__udivmodqi4_ep>:
 7b2:	88 1f       	adc	r24, r24
 7b4:	7a 95       	dec	r23
 7b6:	c9 f7       	brne	.-14     	; 0x7aa <__udivmodqi4_loop>
 7b8:	80 95       	com	r24
 7ba:	08 95       	ret

000007bc <__divmodhi4>:
 7bc:	97 fb       	bst	r25, 7
 7be:	09 2e       	mov	r0, r25
 7c0:	07 26       	eor	r0, r23
 7c2:	0a d0       	rcall	.+20     	; 0x7d8 <__divmodhi4_neg1>
 7c4:	77 fd       	sbrc	r23, 7
 7c6:	04 d0       	rcall	.+8      	; 0x7d0 <__divmodhi4_neg2>
 7c8:	0c d0       	rcall	.+24     	; 0x7e2 <__udivmodhi4>
 7ca:	06 d0       	rcall	.+12     	; 0x7d8 <__divmodhi4_neg1>
 7cc:	00 20       	and	r0, r0
 7ce:	1a f4       	brpl	.+6      	; 0x7d6 <__divmodhi4_exit>

000007d0 <__divmodhi4_neg2>:
 7d0:	70 95       	com	r23
 7d2:	61 95       	neg	r22
 7d4:	7f 4f       	sbci	r23, 0xFF	; 255

000007d6 <__divmodhi4_exit>:
 7d6:	08 95       	ret

000007d8 <__divmodhi4_neg1>:
 7d8:	f6 f7       	brtc	.-4      	; 0x7d6 <__divmodhi4_exit>
 7da:	90 95       	com	r25
 7dc:	81 95       	neg	r24
 7de:	9f 4f       	sbci	r25, 0xFF	; 255
 7e0:	08 95       	ret

000007e2 <__udivmodhi4>:
 7e2:	aa 1b       	sub	r26, r26
 7e4:	bb 1b       	sub	r27, r27
 7e6:	51 e1       	ldi	r21, 0x11	; 17
 7e8:	07 c0       	rjmp	.+14     	; 0x7f8 <__udivmodhi4_ep>

000007ea <__udivmodhi4_loop>:
 7ea:	aa 1f       	adc	r26, r26
 7ec:	bb 1f       	adc	r27, r27
 7ee:	a6 17       	cp	r26, r22
 7f0:	b7 07       	cpc	r27, r23
 7f2:	10 f0       	brcs	.+4      	; 0x7f8 <__udivmodhi4_ep>
 7f4:	a6 1b       	sub	r26, r22
 7f6:	b7 0b       	sbc	r27, r23

000007f8 <__udivmodhi4_ep>:
 7f8:	88 1f       	adc	r24, r24
 7fa:	99 1f       	adc	r25, r25
 7fc:	5a 95       	dec	r21
 7fe:	a9 f7       	brne	.-22     	; 0x7ea <__udivmodhi4_loop>
 800:	80 95       	com	r24
 802:	90 95       	com	r25
 804:	bc 01       	movw	r22, r24
 806:	cd 01       	movw	r24, r26
 808:	08 95       	ret

0000080a <_exit>:
 80a:	f8 94       	cli

0000080c <__stop_program>:
 80c:	ff cf       	rjmp	.-2      	; 0x80c <__stop_program>
