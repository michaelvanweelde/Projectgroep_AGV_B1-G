
bin\Debug\AGV_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800200  0000068e  00000742  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000068e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080023c  0080023c  0000077e  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  0000077e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000060  00000000  00000000  00000781  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001af  00000000  00000000  000007e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000059d  00000000  00000000  00000990  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002eb  00000000  00000000  00000f2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000070a  00000000  00000000  00001218  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000170  00000000  00000000  00001924  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000275  00000000  00000000  00001a94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003c5  00000000  00000000  00001d09  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee e8       	ldi	r30, 0x8E	; 142
  fc:	f6 e0       	ldi	r31, 0x06	; 6
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ac 33       	cpi	r26, 0x3C	; 60
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	12 e0       	ldi	r17, 0x02	; 2
 110:	ac e3       	ldi	r26, 0x3C	; 60
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ae 33       	cpi	r26, 0x3E	; 62
 11a:	b1 07       	cpc	r27, r17
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 29 02 	call	0x452	; 0x452 <main>
 122:	0c 94 45 03 	jmp	0x68a	; 0x68a <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <I2C_Init>:
 12a:	10 92 b9 00 	sts	0x00B9, r1
 12e:	88 e4       	ldi	r24, 0x48	; 72
 130:	80 93 b8 00 	sts	0x00B8, r24
 134:	08 95       	ret

00000136 <I2C_Start>:
 136:	98 2f       	mov	r25, r24
 138:	84 ea       	ldi	r24, 0xA4	; 164
 13a:	80 93 bc 00 	sts	0x00BC, r24
 13e:	ec eb       	ldi	r30, 0xBC	; 188
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	88 23       	and	r24, r24
 146:	ec f7       	brge	.-6      	; 0x142 <I2C_Start+0xc>
 148:	80 91 b9 00 	lds	r24, 0x00B9
 14c:	88 7f       	andi	r24, 0xF8	; 248
 14e:	88 30       	cpi	r24, 0x08	; 8
 150:	11 f0       	breq	.+4      	; 0x156 <I2C_Start+0x20>
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	08 95       	ret
 156:	90 93 bb 00 	sts	0x00BB, r25
 15a:	84 e8       	ldi	r24, 0x84	; 132
 15c:	80 93 bc 00 	sts	0x00BC, r24
 160:	ec eb       	ldi	r30, 0xBC	; 188
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	88 23       	and	r24, r24
 168:	ec f7       	brge	.-6      	; 0x164 <I2C_Start+0x2e>
 16a:	80 91 b9 00 	lds	r24, 0x00B9
 16e:	88 7f       	andi	r24, 0xF8	; 248
 170:	88 31       	cpi	r24, 0x18	; 24
 172:	11 f4       	brne	.+4      	; 0x178 <I2C_Start+0x42>
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	08 95       	ret
 178:	80 32       	cpi	r24, 0x20	; 32
 17a:	11 f0       	breq	.+4      	; 0x180 <I2C_Start+0x4a>
 17c:	83 e0       	ldi	r24, 0x03	; 3
 17e:	08 95       	ret
 180:	82 e0       	ldi	r24, 0x02	; 2
 182:	08 95       	ret

00000184 <I2C_Repeated_Start>:
 184:	98 2f       	mov	r25, r24
 186:	84 ea       	ldi	r24, 0xA4	; 164
 188:	80 93 bc 00 	sts	0x00BC, r24
 18c:	ec eb       	ldi	r30, 0xBC	; 188
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	80 81       	ld	r24, Z
 192:	88 23       	and	r24, r24
 194:	ec f7       	brge	.-6      	; 0x190 <I2C_Repeated_Start+0xc>
 196:	80 91 b9 00 	lds	r24, 0x00B9
 19a:	88 7f       	andi	r24, 0xF8	; 248
 19c:	80 31       	cpi	r24, 0x10	; 16
 19e:	11 f0       	breq	.+4      	; 0x1a4 <I2C_Repeated_Start+0x20>
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	08 95       	ret
 1a4:	90 93 bb 00 	sts	0x00BB, r25
 1a8:	84 e8       	ldi	r24, 0x84	; 132
 1aa:	80 93 bc 00 	sts	0x00BC, r24
 1ae:	ec eb       	ldi	r30, 0xBC	; 188
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	88 23       	and	r24, r24
 1b6:	ec f7       	brge	.-6      	; 0x1b2 <I2C_Repeated_Start+0x2e>
 1b8:	80 91 b9 00 	lds	r24, 0x00B9
 1bc:	88 7f       	andi	r24, 0xF8	; 248
 1be:	80 34       	cpi	r24, 0x40	; 64
 1c0:	11 f4       	brne	.+4      	; 0x1c6 <I2C_Repeated_Start+0x42>
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	08 95       	ret
 1c6:	80 32       	cpi	r24, 0x20	; 32
 1c8:	11 f0       	breq	.+4      	; 0x1ce <I2C_Repeated_Start+0x4a>
 1ca:	83 e0       	ldi	r24, 0x03	; 3
 1cc:	08 95       	ret
 1ce:	82 e0       	ldi	r24, 0x02	; 2
 1d0:	08 95       	ret

000001d2 <I2C_Stop>:
 1d2:	84 e9       	ldi	r24, 0x94	; 148
 1d4:	80 93 bc 00 	sts	0x00BC, r24
 1d8:	ec eb       	ldi	r30, 0xBC	; 188
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	84 fd       	sbrc	r24, 4
 1e0:	fd cf       	rjmp	.-6      	; 0x1dc <I2C_Stop+0xa>
 1e2:	08 95       	ret

000001e4 <I2C_Start_Wait>:
 1e4:	bf 92       	push	r11
 1e6:	cf 92       	push	r12
 1e8:	df 92       	push	r13
 1ea:	ef 92       	push	r14
 1ec:	ff 92       	push	r15
 1ee:	0f 93       	push	r16
 1f0:	1f 93       	push	r17
 1f2:	cf 93       	push	r28
 1f4:	df 93       	push	r29
 1f6:	e8 2e       	mov	r14, r24
 1f8:	cc eb       	ldi	r28, 0xBC	; 188
 1fa:	d0 e0       	ldi	r29, 0x00	; 0
 1fc:	0f 2e       	mov	r0, r31
 1fe:	f4 ea       	ldi	r31, 0xA4	; 164
 200:	ff 2e       	mov	r15, r31
 202:	f0 2d       	mov	r31, r0
 204:	09 eb       	ldi	r16, 0xB9	; 185
 206:	10 e0       	ldi	r17, 0x00	; 0
 208:	0f 2e       	mov	r0, r31
 20a:	fb eb       	ldi	r31, 0xBB	; 187
 20c:	cf 2e       	mov	r12, r31
 20e:	dd 24       	eor	r13, r13
 210:	f0 2d       	mov	r31, r0
 212:	0f 2e       	mov	r0, r31
 214:	f4 e8       	ldi	r31, 0x84	; 132
 216:	bf 2e       	mov	r11, r31
 218:	f0 2d       	mov	r31, r0
 21a:	f8 82       	st	Y, r15
 21c:	88 81       	ld	r24, Y
 21e:	88 23       	and	r24, r24
 220:	ec f7       	brge	.-6      	; 0x21c <I2C_Start_Wait+0x38>
 222:	f8 01       	movw	r30, r16
 224:	80 81       	ld	r24, Z
 226:	88 7f       	andi	r24, 0xF8	; 248
 228:	88 30       	cpi	r24, 0x08	; 8
 22a:	b9 f7       	brne	.-18     	; 0x21a <I2C_Start_Wait+0x36>
 22c:	f6 01       	movw	r30, r12
 22e:	e0 82       	st	Z, r14
 230:	b8 82       	st	Y, r11
 232:	88 81       	ld	r24, Y
 234:	88 23       	and	r24, r24
 236:	ec f7       	brge	.-6      	; 0x232 <I2C_Start_Wait+0x4e>
 238:	f8 01       	movw	r30, r16
 23a:	80 81       	ld	r24, Z
 23c:	88 7f       	andi	r24, 0xF8	; 248
 23e:	88 31       	cpi	r24, 0x18	; 24
 240:	19 f0       	breq	.+6      	; 0x248 <I2C_Start_Wait+0x64>
 242:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <I2C_Stop>
 246:	e9 cf       	rjmp	.-46     	; 0x21a <I2C_Start_Wait+0x36>
 248:	df 91       	pop	r29
 24a:	cf 91       	pop	r28
 24c:	1f 91       	pop	r17
 24e:	0f 91       	pop	r16
 250:	ff 90       	pop	r15
 252:	ef 90       	pop	r14
 254:	df 90       	pop	r13
 256:	cf 90       	pop	r12
 258:	bf 90       	pop	r11
 25a:	08 95       	ret

0000025c <I2C_Write>:
 25c:	80 93 bb 00 	sts	0x00BB, r24
 260:	84 e8       	ldi	r24, 0x84	; 132
 262:	80 93 bc 00 	sts	0x00BC, r24
 266:	ec eb       	ldi	r30, 0xBC	; 188
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	80 81       	ld	r24, Z
 26c:	88 23       	and	r24, r24
 26e:	ec f7       	brge	.-6      	; 0x26a <I2C_Write+0xe>
 270:	80 91 b9 00 	lds	r24, 0x00B9
 274:	88 7f       	andi	r24, 0xF8	; 248
 276:	88 32       	cpi	r24, 0x28	; 40
 278:	11 f4       	brne	.+4      	; 0x27e <I2C_Write+0x22>
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	08 95       	ret
 27e:	80 33       	cpi	r24, 0x30	; 48
 280:	11 f0       	breq	.+4      	; 0x286 <I2C_Write+0x2a>
 282:	82 e0       	ldi	r24, 0x02	; 2
 284:	08 95       	ret
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	08 95       	ret

0000028a <I2C_Read_Ack>:
 28a:	84 ec       	ldi	r24, 0xC4	; 196
 28c:	80 93 bc 00 	sts	0x00BC, r24
 290:	ec eb       	ldi	r30, 0xBC	; 188
 292:	f0 e0       	ldi	r31, 0x00	; 0
 294:	80 81       	ld	r24, Z
 296:	88 23       	and	r24, r24
 298:	ec f7       	brge	.-6      	; 0x294 <I2C_Read_Ack+0xa>
 29a:	80 91 bb 00 	lds	r24, 0x00BB
 29e:	08 95       	ret

000002a0 <I2C_Read_Nack>:
 2a0:	84 e8       	ldi	r24, 0x84	; 132
 2a2:	80 93 bc 00 	sts	0x00BC, r24
 2a6:	ec eb       	ldi	r30, 0xBC	; 188
 2a8:	f0 e0       	ldi	r31, 0x00	; 0
 2aa:	80 81       	ld	r24, Z
 2ac:	88 23       	and	r24, r24
 2ae:	ec f7       	brge	.-6      	; 0x2aa <I2C_Read_Nack+0xa>
 2b0:	80 91 bb 00 	lds	r24, 0x00BB
 2b4:	08 95       	ret

000002b6 <MagnometerRead>:
    this way magnets are ignored
    */
    //----------------------------

    return Xvalue;
}
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	08 95       	ret

000002bc <IRDistanceRead>:

int IRDistanceRead(int sensor)
{
    int Distance=0;

    switch (sensor)
 2bc:	81 30       	cpi	r24, 0x01	; 1
 2be:	91 05       	cpc	r25, r1
 2c0:	59 f0       	breq	.+22     	; 0x2d8 <IRDistanceRead+0x1c>
 2c2:	82 30       	cpi	r24, 0x02	; 2
 2c4:	91 05       	cpc	r25, r1
 2c6:	79 f0       	breq	.+30     	; 0x2e6 <IRDistanceRead+0x2a>
 2c8:	89 2b       	or	r24, r25
 2ca:	99 f4       	brne	.+38     	; 0x2f2 <IRDistanceRead+0x36>
    {
    case 0: // Set pin 0 as read pin
        ADMUX  = (ADMUX) & ~((1<<MUX0)|(1<<MUX1)|(1<<MUX2));    //PIN selection
 2cc:	ec e7       	ldi	r30, 0x7C	; 124
 2ce:	f0 e0       	ldi	r31, 0x00	; 0
 2d0:	80 81       	ld	r24, Z
 2d2:	88 7f       	andi	r24, 0xF8	; 248
 2d4:	80 83       	st	Z, r24
 2d6:	0d c0       	rjmp	.+26     	; 0x2f2 <IRDistanceRead+0x36>
        break;

    case 1:// Set pin 2 as read pin
        ADMUX  = (ADMUX | (1<<MUX1)) & ~((1<<MUX0)|(1<<MUX2));  //PIN selection
 2d8:	ec e7       	ldi	r30, 0x7C	; 124
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	80 81       	ld	r24, Z
 2de:	88 7f       	andi	r24, 0xF8	; 248
 2e0:	82 60       	ori	r24, 0x02	; 2
 2e2:	80 83       	st	Z, r24
 2e4:	06 c0       	rjmp	.+12     	; 0x2f2 <IRDistanceRead+0x36>
        break;

    case 2: // Set pin 4 as read pin
         ADMUX  = (ADMUX | (1<<MUX2)) & ~((1<<MUX0)|(1<<MUX1)); //PIN selection
 2e6:	ec e7       	ldi	r30, 0x7C	; 124
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	80 81       	ld	r24, Z
 2ec:	88 7f       	andi	r24, 0xF8	; 248
 2ee:	84 60       	ori	r24, 0x04	; 4
 2f0:	80 83       	st	Z, r24
        break;
    }



    ADCSRA |= (1 << ADSC);
 2f2:	ea e7       	ldi	r30, 0x7A	; 122
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	80 81       	ld	r24, Z
 2f8:	80 64       	ori	r24, 0x40	; 64
 2fa:	80 83       	st	Z, r24
    while ((ADCSRA & (1 << ADSC)) == 1);
 2fc:	e0 81       	ld	r30, Z

    // ADC data is left aligned and can be read from ADCH as an 8 bit value
    Distance = (ADCH);
 2fe:	80 91 79 00 	lds	r24, 0x0079

    return Distance;
}
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	08 95       	ret

00000306 <ColorSensorRead>:

int ColorSensorRead(int sensor)
{
 306:	ef 92       	push	r14
 308:	ff 92       	push	r15
 30a:	0f 93       	push	r16
 30c:	1f 93       	push	r17
 30e:	df 93       	push	r29
 310:	cf 93       	push	r28
 312:	00 d0       	rcall	.+0      	; 0x314 <ColorSensorRead+0xe>
 314:	00 d0       	rcall	.+0      	; 0x316 <ColorSensorRead+0x10>
 316:	cd b7       	in	r28, 0x3d	; 61
 318:	de b7       	in	r29, 0x3e	; 62
 31a:	8c 01       	movw	r16, r24
    // initialize variables------------------------------------
    volatile long width=0;
 31c:	19 82       	std	Y+1, r1	; 0x01
 31e:	1a 82       	std	Y+2, r1	; 0x02
 320:	1b 82       	std	Y+3, r1	; 0x03
 322:	1c 82       	std	Y+4, r1	; 0x04
 324:	ee 24       	eor	r14, r14
 326:	ff 24       	eor	r15, r15
 328:	e3 94       	inc	r14
        volatile int timeout=0;
        //-----------------------------------------------------


        // Wait until pin turns high then measure pulse width--
        while(!(TCS3200G_L) && (sensor == 0) && timeout++<1000);
 32a:	e3 e2       	ldi	r30, 0x23	; 35
 32c:	f0 e0       	ldi	r31, 0x00	; 0
    //---------------------------------------------------------


    for(X=1; X<11; X++){
        //Create a timeout variable for error detection--------
        volatile int timeout=0;
 32e:	1e 82       	std	Y+6, r1	; 0x06
 330:	1d 82       	std	Y+5, r1	; 0x05
        //-----------------------------------------------------


        // Wait until pin turns high then measure pulse width--
        while(!(TCS3200G_L) && (sensor == 0) && timeout++<1000);
 332:	80 81       	ld	r24, Z
 334:	83 fd       	sbrc	r24, 3
 336:	03 c0       	rjmp	.+6      	; 0x33e <ColorSensorRead+0x38>
 338:	01 15       	cp	r16, r1
 33a:	11 05       	cpc	r17, r1
 33c:	21 f0       	breq	.+8      	; 0x346 <ColorSensorRead+0x40>
        while(TCS3200G_L)width++;
 33e:	80 81       	ld	r24, Z
 340:	83 fd       	sbrc	r24, 3
 342:	0b c0       	rjmp	.+22     	; 0x35a <ColorSensorRead+0x54>
 344:	18 c0       	rjmp	.+48     	; 0x376 <ColorSensorRead+0x70>
        volatile int timeout=0;
        //-----------------------------------------------------


        // Wait until pin turns high then measure pulse width--
        while(!(TCS3200G_L) && (sensor == 0) && timeout++<1000);
 346:	2d 81       	ldd	r18, Y+5	; 0x05
 348:	3e 81       	ldd	r19, Y+6	; 0x06
 34a:	c9 01       	movw	r24, r18
 34c:	01 96       	adiw	r24, 0x01	; 1
 34e:	9e 83       	std	Y+6, r25	; 0x06
 350:	8d 83       	std	Y+5, r24	; 0x05
 352:	28 5e       	subi	r18, 0xE8	; 232
 354:	33 40       	sbci	r19, 0x03	; 3
 356:	6c f3       	brlt	.-38     	; 0x332 <ColorSensorRead+0x2c>
 358:	f2 cf       	rjmp	.-28     	; 0x33e <ColorSensorRead+0x38>
        while(TCS3200G_L)width++;
 35a:	89 81       	ldd	r24, Y+1	; 0x01
 35c:	9a 81       	ldd	r25, Y+2	; 0x02
 35e:	ab 81       	ldd	r26, Y+3	; 0x03
 360:	bc 81       	ldd	r27, Y+4	; 0x04
 362:	01 96       	adiw	r24, 0x01	; 1
 364:	a1 1d       	adc	r26, r1
 366:	b1 1d       	adc	r27, r1
 368:	89 83       	std	Y+1, r24	; 0x01
 36a:	9a 83       	std	Y+2, r25	; 0x02
 36c:	ab 83       	std	Y+3, r26	; 0x03
 36e:	bc 83       	std	Y+4, r27	; 0x04
 370:	80 81       	ld	r24, Z
 372:	83 fd       	sbrc	r24, 3
 374:	f2 cf       	rjmp	.-28     	; 0x35a <ColorSensorRead+0x54>

        while(!(TCS3200G_R) && (sensor == 1) && timeout++<1000);
 376:	80 81       	ld	r24, Z
 378:	84 fd       	sbrc	r24, 4
 37a:	03 c0       	rjmp	.+6      	; 0x382 <ColorSensorRead+0x7c>
 37c:	01 30       	cpi	r16, 0x01	; 1
 37e:	11 05       	cpc	r17, r1
 380:	21 f0       	breq	.+8      	; 0x38a <ColorSensorRead+0x84>
        while(TCS3200G_R)width++;
 382:	80 81       	ld	r24, Z
 384:	84 fd       	sbrc	r24, 4
 386:	0b c0       	rjmp	.+22     	; 0x39e <ColorSensorRead+0x98>
 388:	18 c0       	rjmp	.+48     	; 0x3ba <ColorSensorRead+0xb4>

        // Wait until pin turns high then measure pulse width--
        while(!(TCS3200G_L) && (sensor == 0) && timeout++<1000);
        while(TCS3200G_L)width++;

        while(!(TCS3200G_R) && (sensor == 1) && timeout++<1000);
 38a:	2d 81       	ldd	r18, Y+5	; 0x05
 38c:	3e 81       	ldd	r19, Y+6	; 0x06
 38e:	c9 01       	movw	r24, r18
 390:	01 96       	adiw	r24, 0x01	; 1
 392:	9e 83       	std	Y+6, r25	; 0x06
 394:	8d 83       	std	Y+5, r24	; 0x05
 396:	28 5e       	subi	r18, 0xE8	; 232
 398:	33 40       	sbci	r19, 0x03	; 3
 39a:	6c f3       	brlt	.-38     	; 0x376 <ColorSensorRead+0x70>
 39c:	f2 cf       	rjmp	.-28     	; 0x382 <ColorSensorRead+0x7c>
        while(TCS3200G_R)width++;
 39e:	89 81       	ldd	r24, Y+1	; 0x01
 3a0:	9a 81       	ldd	r25, Y+2	; 0x02
 3a2:	ab 81       	ldd	r26, Y+3	; 0x03
 3a4:	bc 81       	ldd	r27, Y+4	; 0x04
 3a6:	01 96       	adiw	r24, 0x01	; 1
 3a8:	a1 1d       	adc	r26, r1
 3aa:	b1 1d       	adc	r27, r1
 3ac:	89 83       	std	Y+1, r24	; 0x01
 3ae:	9a 83       	std	Y+2, r25	; 0x02
 3b0:	ab 83       	std	Y+3, r26	; 0x03
 3b2:	bc 83       	std	Y+4, r27	; 0x04
 3b4:	80 81       	ld	r24, Z
 3b6:	84 fd       	sbrc	r24, 4
 3b8:	f2 cf       	rjmp	.-28     	; 0x39e <ColorSensorRead+0x98>
        //-----------------------------------------------------


        // Display error code with data and return 0 for error-
        if(timeout==1000){
 3ba:	8d 81       	ldd	r24, Y+5	; 0x05
 3bc:	9e 81       	ldd	r25, Y+6	; 0x06
 3be:	88 5e       	subi	r24, 0xE8	; 232
 3c0:	93 40       	sbci	r25, 0x03	; 3
 3c2:	c1 f4       	brne	.+48     	; 0x3f4 <ColorSensorRead+0xee>
            printString("warning TCS ");
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	92 e0       	ldi	r25, 0x02	; 2
 3c8:	0e 94 89 02 	call	0x512	; 0x512 <printString>
            printByte(sensor);
 3cc:	80 2f       	mov	r24, r16
 3ce:	0e 94 ca 02 	call	0x594	; 0x594 <printByte>
            printString(" out of boundaries after: ");
 3d2:	8d e0       	ldi	r24, 0x0D	; 13
 3d4:	92 e0       	ldi	r25, 0x02	; 2
 3d6:	0e 94 89 02 	call	0x512	; 0x512 <printString>
            printByte(X);
 3da:	8e 2d       	mov	r24, r14
 3dc:	0e 94 ca 02 	call	0x594	; 0x594 <printByte>
            printString(" runs");
 3e0:	88 e2       	ldi	r24, 0x28	; 40
 3e2:	92 e0       	ldi	r25, 0x02	; 2
 3e4:	0e 94 89 02 	call	0x512	; 0x512 <printString>
            printByte('\n');
 3e8:	8a e0       	ldi	r24, 0x0A	; 10
 3ea:	0e 94 ca 02 	call	0x594	; 0x594 <printByte>
 3ee:	20 e0       	ldi	r18, 0x00	; 0
 3f0:	30 e0       	ldi	r19, 0x00	; 0
 3f2:	20 c0       	rjmp	.+64     	; 0x434 <ColorSensorRead+0x12e>
    volatile long width=0;
    int X;
    //---------------------------------------------------------


    for(X=1; X<11; X++){
 3f4:	08 94       	sec
 3f6:	e1 1c       	adc	r14, r1
 3f8:	f1 1c       	adc	r15, r1
 3fa:	8b e0       	ldi	r24, 0x0B	; 11
 3fc:	e8 16       	cp	r14, r24
 3fe:	f1 04       	cpc	r15, r1
 400:	09 f0       	breq	.+2      	; 0x404 <ColorSensorRead+0xfe>
 402:	95 cf       	rjmp	.-214    	; 0x32e <ColorSensorRead+0x28>
        }
        //-----------------------------------------------------
    }

    //Take the average value of the measurement rounding down--
    width = width / X;
 404:	69 81       	ldd	r22, Y+1	; 0x01
 406:	7a 81       	ldd	r23, Y+2	; 0x02
 408:	8b 81       	ldd	r24, Y+3	; 0x03
 40a:	9c 81       	ldd	r25, Y+4	; 0x04
 40c:	97 01       	movw	r18, r14
 40e:	44 27       	eor	r20, r20
 410:	37 fd       	sbrc	r19, 7
 412:	40 95       	com	r20
 414:	54 2f       	mov	r21, r20
 416:	0e 94 08 03 	call	0x610	; 0x610 <__divmodsi4>
 41a:	82 2f       	mov	r24, r18
 41c:	93 2f       	mov	r25, r19
 41e:	a4 2f       	mov	r26, r20
 420:	b5 2f       	mov	r27, r21
 422:	89 83       	std	Y+1, r24	; 0x01
 424:	9a 83       	std	Y+2, r25	; 0x02
 426:	ab 83       	std	Y+3, r26	; 0x03
 428:	bc 83       	std	Y+4, r27	; 0x04
    //---------------------------------------------------------


    return width; // Return value
 42a:	89 81       	ldd	r24, Y+1	; 0x01
 42c:	9a 81       	ldd	r25, Y+2	; 0x02
 42e:	ab 81       	ldd	r26, Y+3	; 0x03
 430:	bc 81       	ldd	r27, Y+4	; 0x04
 432:	9c 01       	movw	r18, r24
}
 434:	82 2f       	mov	r24, r18
 436:	93 2f       	mov	r25, r19
 438:	26 96       	adiw	r28, 0x06	; 6
 43a:	0f b6       	in	r0, 0x3f	; 63
 43c:	f8 94       	cli
 43e:	de bf       	out	0x3e, r29	; 62
 440:	0f be       	out	0x3f, r0	; 63
 442:	cd bf       	out	0x3d, r28	; 61
 444:	cf 91       	pop	r28
 446:	df 91       	pop	r29
 448:	1f 91       	pop	r17
 44a:	0f 91       	pop	r16
 44c:	ff 90       	pop	r15
 44e:	ef 90       	pop	r14
 450:	08 95       	ret

00000452 <main>:

int main(void)
{

//-Initialise ADCs---------
    ADMUX |= (0 << REFS1) |(1 << REFS0)|(1<<ADLAR);     //Voltage reference via capacitor on arduino
 452:	ec e7       	ldi	r30, 0x7C	; 124
 454:	f0 e0       	ldi	r31, 0x00	; 0
 456:	80 81       	ld	r24, Z
 458:	80 66       	ori	r24, 0x60	; 96
 45a:	80 83       	st	Z, r24
    ADCSRA |= (1 << ADEN) |(0 << ADIE);                 //ADC enable and ADC conversion complete interrupt disabled
 45c:	ea e7       	ldi	r30, 0x7A	; 122
 45e:	f0 e0       	ldi	r31, 0x00	; 0
 460:	80 81       	ld	r24, Z
 462:	80 68       	ori	r24, 0x80	; 128
 464:	80 83       	st	Z, r24
    ADCSRA |= (1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0);   //Prescaler settings (Currently 128)
 466:	80 81       	ld	r24, Z
 468:	87 60       	ori	r24, 0x07	; 7
 46a:	80 83       	st	Z, r24
    DIDR0 = 0b11111111;                                 //Disable Digital input
 46c:	8f ef       	ldi	r24, 0xFF	; 255
 46e:	80 93 7e 00 	sts	0x007E, r24
    DIDR2 = 0b11111111;                                 //Disable Digital input
 472:	80 93 7d 00 	sts	0x007D, r24
    ADCSRA |= (1 << ADSC);                              //Run a single conversion in order to prime the circuit
 476:	80 81       	ld	r24, Z
 478:	80 64       	ori	r24, 0x40	; 64
 47a:	80 83       	st	Z, r24

//-------------------------


//-Initialise Serial-------
    initUSART();
 47c:	0e 94 67 02 	call	0x4ce	; 0x4ce <initUSART>
    printString("RDY");
 480:	8e e2       	ldi	r24, 0x2E	; 46
 482:	92 e0       	ldi	r25, 0x02	; 2
 484:	0e 94 89 02 	call	0x512	; 0x512 <printString>
    */
//-------------------------


//-zero magnometer---------
    I2C_Init();
 488:	0e 94 95 00 	call	0x12a	; 0x12a <I2C_Init>
	I2C_Start(0x3C);	/* Start and write SLA+W */
 48c:	8c e3       	ldi	r24, 0x3C	; 60
 48e:	0e 94 9b 00 	call	0x136	; 0x136 <I2C_Start>
	I2C_Write(0x00);	/* Write memory location address */
 492:	80 e0       	ldi	r24, 0x00	; 0
 494:	0e 94 2e 01 	call	0x25c	; 0x25c <I2C_Write>
	I2C_Write(0x70);	/* Configure register A as 8-average, 15 Hz default, normal measurement */
 498:	80 e7       	ldi	r24, 0x70	; 112
 49a:	0e 94 2e 01 	call	0x25c	; 0x25c <I2C_Write>
	I2C_Write(0xA0);	/* Configure register B for gain */
 49e:	80 ea       	ldi	r24, 0xA0	; 160
 4a0:	0e 94 2e 01 	call	0x25c	; 0x25c <I2C_Write>
	I2C_Write(0x00);	/* Configure continuous measurement mode in mode register */
 4a4:	80 e0       	ldi	r24, 0x00	; 0
 4a6:	0e 94 2e 01 	call	0x25c	; 0x25c <I2C_Write>
	I2C_Stop();		    /* Stop I2C */
 4aa:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <I2C_Stop>
    north_angle = MagnometerRead();
 4ae:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <MagnometerRead>
 4b2:	90 93 3d 02 	sts	0x023D, r25
 4b6:	80 93 3c 02 	sts	0x023C, r24
    printString(" working");
 4ba:	82 e3       	ldi	r24, 0x32	; 50
 4bc:	92 e0       	ldi	r25, 0x02	; 2
 4be:	0e 94 89 02 	call	0x512	; 0x512 <printString>
//-------------------------

//-Enable sei--------------
    sei();
 4c2:	78 94       	sei
//-------------------------
    printString(" working");
 4c4:	82 e3       	ldi	r24, 0x32	; 50
 4c6:	92 e0       	ldi	r25, 0x02	; 2
 4c8:	0e 94 89 02 	call	0x512	; 0x512 <printString>
 4cc:	ff cf       	rjmp	.-2      	; 0x4cc <main+0x7a>

000004ce <initUSART>:
#include <avr/io.h>
#include "USART.h"
#include <util/setbaud.h>

void initUSART(void) {                                /* requires BAUD */
  UBRR0H = UBRRH_VALUE;                        /* defined in setbaud.h */
 4ce:	10 92 c5 00 	sts	0x00C5, r1
  UBRR0L = UBRRL_VALUE;
 4d2:	87 e6       	ldi	r24, 0x67	; 103
 4d4:	80 93 c4 00 	sts	0x00C4, r24
#if USE_2X
  UCSR0A |= (1 << U2X0);
#else
  UCSR0A &= ~(1 << U2X0);
 4d8:	e0 ec       	ldi	r30, 0xC0	; 192
 4da:	f0 e0       	ldi	r31, 0x00	; 0
 4dc:	80 81       	ld	r24, Z
 4de:	8d 7f       	andi	r24, 0xFD	; 253
 4e0:	80 83       	st	Z, r24
#endif
                                  /* Enable USART transmitter/receiver */
  UCSR0B = (1 << TXEN0) | (1 << RXEN0);
 4e2:	88 e1       	ldi	r24, 0x18	; 24
 4e4:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);   /* 8 data bits, 1 stop bit */
 4e8:	86 e0       	ldi	r24, 0x06	; 6
 4ea:	80 93 c2 00 	sts	0x00C2, r24
}
 4ee:	08 95       	ret

000004f0 <transmitByte>:


void transmitByte(uint8_t data) {
 4f0:	98 2f       	mov	r25, r24
                                     /* Wait for empty transmit buffer */
  loop_until_bit_is_set(UCSR0A, UDRE0);
 4f2:	e0 ec       	ldi	r30, 0xC0	; 192
 4f4:	f0 e0       	ldi	r31, 0x00	; 0
 4f6:	80 81       	ld	r24, Z
 4f8:	85 ff       	sbrs	r24, 5
 4fa:	fd cf       	rjmp	.-6      	; 0x4f6 <transmitByte+0x6>
  UDR0 = data;                                            /* send data */
 4fc:	90 93 c6 00 	sts	0x00C6, r25
}
 500:	08 95       	ret

00000502 <receiveByte>:

uint8_t receiveByte(void) {
  loop_until_bit_is_set(UCSR0A, RXC0);       /* Wait for incoming data */
 502:	e0 ec       	ldi	r30, 0xC0	; 192
 504:	f0 e0       	ldi	r31, 0x00	; 0
 506:	80 81       	ld	r24, Z
 508:	88 23       	and	r24, r24
 50a:	ec f7       	brge	.-6      	; 0x506 <receiveByte+0x4>
  return UDR0;                                /* return register value */
 50c:	80 91 c6 00 	lds	r24, 0x00C6
}
 510:	08 95       	ret

00000512 <printString>:


                       /* Here are a bunch of useful printing commands */

void printString(const char myString[]) {
 512:	1f 93       	push	r17
 514:	cf 93       	push	r28
 516:	df 93       	push	r29
 518:	ec 01       	movw	r28, r24
  uint8_t i = 0;
  while (myString[i]) {
 51a:	88 81       	ld	r24, Y
 51c:	88 23       	and	r24, r24
 51e:	51 f0       	breq	.+20     	; 0x534 <printString+0x22>
 520:	10 e0       	ldi	r17, 0x00	; 0
    transmitByte(myString[i]);
 522:	0e 94 78 02 	call	0x4f0	; 0x4f0 <transmitByte>
    i++;
 526:	1f 5f       	subi	r17, 0xFF	; 255

                       /* Here are a bunch of useful printing commands */

void printString(const char myString[]) {
  uint8_t i = 0;
  while (myString[i]) {
 528:	fe 01       	movw	r30, r28
 52a:	e1 0f       	add	r30, r17
 52c:	f1 1d       	adc	r31, r1
 52e:	80 81       	ld	r24, Z
 530:	88 23       	and	r24, r24
 532:	b9 f7       	brne	.-18     	; 0x522 <printString+0x10>
    transmitByte(myString[i]);
    i++;
  }
}
 534:	df 91       	pop	r29
 536:	cf 91       	pop	r28
 538:	1f 91       	pop	r17
 53a:	08 95       	ret

0000053c <readString>:

void readString(char myString[], uint8_t maxLength) {
 53c:	ef 92       	push	r14
 53e:	ff 92       	push	r15
 540:	0f 93       	push	r16
 542:	1f 93       	push	r17
 544:	cf 93       	push	r28
 546:	df 93       	push	r29
 548:	7c 01       	movw	r14, r24
  char response;
  uint8_t i;
  i = 0;
  while (i < (maxLength - 1)) {                   /* prevent over-runs */
 54a:	70 e0       	ldi	r23, 0x00	; 0
 54c:	eb 01       	movw	r28, r22
 54e:	21 97       	sbiw	r28, 0x01	; 1
 550:	1c 16       	cp	r1, r28
 552:	1d 06       	cpc	r1, r29
 554:	14 f0       	brlt	.+4      	; 0x55a <readString+0x1e>
 556:	00 e0       	ldi	r16, 0x00	; 0
 558:	12 c0       	rjmp	.+36     	; 0x57e <readString+0x42>
 55a:	00 e0       	ldi	r16, 0x00	; 0
    response = receiveByte();
 55c:	0e 94 81 02 	call	0x502	; 0x502 <receiveByte>
 560:	18 2f       	mov	r17, r24
    transmitByte(response);                                    /* echo */
 562:	0e 94 78 02 	call	0x4f0	; 0x4f0 <transmitByte>
    if (response == '\r') {                     /* enter marks the end */
 566:	1d 30       	cpi	r17, 0x0D	; 13
 568:	51 f0       	breq	.+20     	; 0x57e <readString+0x42>
      break;
    }
    else {
      myString[i] = response;                       /* add in a letter */
 56a:	f7 01       	movw	r30, r14
 56c:	e0 0f       	add	r30, r16
 56e:	f1 1d       	adc	r31, r1
 570:	10 83       	st	Z, r17
      i++;
 572:	0f 5f       	subi	r16, 0xFF	; 255

void readString(char myString[], uint8_t maxLength) {
  char response;
  uint8_t i;
  i = 0;
  while (i < (maxLength - 1)) {                   /* prevent over-runs */
 574:	80 2f       	mov	r24, r16
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	8c 17       	cp	r24, r28
 57a:	9d 07       	cpc	r25, r29
 57c:	7c f3       	brlt	.-34     	; 0x55c <readString+0x20>
    else {
      myString[i] = response;                       /* add in a letter */
      i++;
    }
  }
  myString[i] = 0;                          /* terminal NULL character */
 57e:	f7 01       	movw	r30, r14
 580:	e0 0f       	add	r30, r16
 582:	f1 1d       	adc	r31, r1
 584:	10 82       	st	Z, r1
}
 586:	df 91       	pop	r29
 588:	cf 91       	pop	r28
 58a:	1f 91       	pop	r17
 58c:	0f 91       	pop	r16
 58e:	ff 90       	pop	r15
 590:	ef 90       	pop	r14
 592:	08 95       	ret

00000594 <printByte>:

void printByte(uint8_t byte) {
 594:	1f 93       	push	r17
 596:	18 2f       	mov	r17, r24
              /* Converts a byte to a string of decimal text, sends it */
  transmitByte('0' + (byte / 100));                        /* Hundreds */
 598:	64 e6       	ldi	r22, 0x64	; 100
 59a:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <__udivmodqi4>
 59e:	80 5d       	subi	r24, 0xD0	; 208
 5a0:	0e 94 78 02 	call	0x4f0	; 0x4f0 <transmitByte>
  transmitByte('0' + ((byte / 10) % 10));                      /* Tens */
 5a4:	81 2f       	mov	r24, r17
 5a6:	6a e0       	ldi	r22, 0x0A	; 10
 5a8:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <__udivmodqi4>
 5ac:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <__udivmodqi4>
 5b0:	89 2f       	mov	r24, r25
 5b2:	80 5d       	subi	r24, 0xD0	; 208
 5b4:	0e 94 78 02 	call	0x4f0	; 0x4f0 <transmitByte>
  transmitByte('0' + (byte % 10));                             /* Ones */
 5b8:	81 2f       	mov	r24, r17
 5ba:	6a e0       	ldi	r22, 0x0A	; 10
 5bc:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <__udivmodqi4>
 5c0:	89 2f       	mov	r24, r25
 5c2:	80 5d       	subi	r24, 0xD0	; 208
 5c4:	0e 94 78 02 	call	0x4f0	; 0x4f0 <transmitByte>
}
 5c8:	1f 91       	pop	r17
 5ca:	08 95       	ret

000005cc <nibbleToHexCharacter>:
  transmitByte(nibbleToHexCharacter(nibble));
}

char nibbleToHexCharacter(uint8_t nibble) {
                                   /* Converts 4 bits into hexadecimal */
  if (nibble < 10) {
 5cc:	8a 30       	cpi	r24, 0x0A	; 10
 5ce:	10 f4       	brcc	.+4      	; 0x5d4 <nibbleToHexCharacter+0x8>
    return ('0' + nibble);
 5d0:	80 5d       	subi	r24, 0xD0	; 208
 5d2:	08 95       	ret
  }
  else {
    return ('A' + nibble - 10);
 5d4:	89 5c       	subi	r24, 0xC9	; 201
  }
}
 5d6:	08 95       	ret

000005d8 <printHexByte>:
  transmitByte('0' + (byte / 100));                        /* Hundreds */
  transmitByte('0' + ((byte / 10) % 10));                      /* Tens */
  transmitByte('0' + (byte % 10));                             /* Ones */
}

void printHexByte(uint8_t byte) {
 5d8:	1f 93       	push	r17
 5da:	18 2f       	mov	r17, r24
                        /* Prints a byte as its hexadecimal equivalent */
  uint8_t nibble;
  nibble = (byte & 0b11110000) >> 4;
  transmitByte(nibbleToHexCharacter(nibble));
 5dc:	82 95       	swap	r24
 5de:	8f 70       	andi	r24, 0x0F	; 15
 5e0:	0e 94 e6 02 	call	0x5cc	; 0x5cc <nibbleToHexCharacter>
 5e4:	0e 94 78 02 	call	0x4f0	; 0x4f0 <transmitByte>
  nibble = byte & 0b00001111;
  transmitByte(nibbleToHexCharacter(nibble));
 5e8:	81 2f       	mov	r24, r17
 5ea:	8f 70       	andi	r24, 0x0F	; 15
 5ec:	0e 94 e6 02 	call	0x5cc	; 0x5cc <nibbleToHexCharacter>
 5f0:	0e 94 78 02 	call	0x4f0	; 0x4f0 <transmitByte>
}
 5f4:	1f 91       	pop	r17
 5f6:	08 95       	ret

000005f8 <__udivmodqi4>:
 5f8:	99 1b       	sub	r25, r25
 5fa:	79 e0       	ldi	r23, 0x09	; 9
 5fc:	04 c0       	rjmp	.+8      	; 0x606 <__udivmodqi4_ep>

000005fe <__udivmodqi4_loop>:
 5fe:	99 1f       	adc	r25, r25
 600:	96 17       	cp	r25, r22
 602:	08 f0       	brcs	.+2      	; 0x606 <__udivmodqi4_ep>
 604:	96 1b       	sub	r25, r22

00000606 <__udivmodqi4_ep>:
 606:	88 1f       	adc	r24, r24
 608:	7a 95       	dec	r23
 60a:	c9 f7       	brne	.-14     	; 0x5fe <__udivmodqi4_loop>
 60c:	80 95       	com	r24
 60e:	08 95       	ret

00000610 <__divmodsi4>:
 610:	97 fb       	bst	r25, 7
 612:	09 2e       	mov	r0, r25
 614:	05 26       	eor	r0, r21
 616:	0e d0       	rcall	.+28     	; 0x634 <__divmodsi4_neg1>
 618:	57 fd       	sbrc	r21, 7
 61a:	04 d0       	rcall	.+8      	; 0x624 <__divmodsi4_neg2>
 61c:	14 d0       	rcall	.+40     	; 0x646 <__udivmodsi4>
 61e:	0a d0       	rcall	.+20     	; 0x634 <__divmodsi4_neg1>
 620:	00 1c       	adc	r0, r0
 622:	38 f4       	brcc	.+14     	; 0x632 <__divmodsi4_exit>

00000624 <__divmodsi4_neg2>:
 624:	50 95       	com	r21
 626:	40 95       	com	r20
 628:	30 95       	com	r19
 62a:	21 95       	neg	r18
 62c:	3f 4f       	sbci	r19, 0xFF	; 255
 62e:	4f 4f       	sbci	r20, 0xFF	; 255
 630:	5f 4f       	sbci	r21, 0xFF	; 255

00000632 <__divmodsi4_exit>:
 632:	08 95       	ret

00000634 <__divmodsi4_neg1>:
 634:	f6 f7       	brtc	.-4      	; 0x632 <__divmodsi4_exit>
 636:	90 95       	com	r25
 638:	80 95       	com	r24
 63a:	70 95       	com	r23
 63c:	61 95       	neg	r22
 63e:	7f 4f       	sbci	r23, 0xFF	; 255
 640:	8f 4f       	sbci	r24, 0xFF	; 255
 642:	9f 4f       	sbci	r25, 0xFF	; 255
 644:	08 95       	ret

00000646 <__udivmodsi4>:
 646:	a1 e2       	ldi	r26, 0x21	; 33
 648:	1a 2e       	mov	r1, r26
 64a:	aa 1b       	sub	r26, r26
 64c:	bb 1b       	sub	r27, r27
 64e:	fd 01       	movw	r30, r26
 650:	0d c0       	rjmp	.+26     	; 0x66c <__udivmodsi4_ep>

00000652 <__udivmodsi4_loop>:
 652:	aa 1f       	adc	r26, r26
 654:	bb 1f       	adc	r27, r27
 656:	ee 1f       	adc	r30, r30
 658:	ff 1f       	adc	r31, r31
 65a:	a2 17       	cp	r26, r18
 65c:	b3 07       	cpc	r27, r19
 65e:	e4 07       	cpc	r30, r20
 660:	f5 07       	cpc	r31, r21
 662:	20 f0       	brcs	.+8      	; 0x66c <__udivmodsi4_ep>
 664:	a2 1b       	sub	r26, r18
 666:	b3 0b       	sbc	r27, r19
 668:	e4 0b       	sbc	r30, r20
 66a:	f5 0b       	sbc	r31, r21

0000066c <__udivmodsi4_ep>:
 66c:	66 1f       	adc	r22, r22
 66e:	77 1f       	adc	r23, r23
 670:	88 1f       	adc	r24, r24
 672:	99 1f       	adc	r25, r25
 674:	1a 94       	dec	r1
 676:	69 f7       	brne	.-38     	; 0x652 <__udivmodsi4_loop>
 678:	60 95       	com	r22
 67a:	70 95       	com	r23
 67c:	80 95       	com	r24
 67e:	90 95       	com	r25
 680:	9b 01       	movw	r18, r22
 682:	ac 01       	movw	r20, r24
 684:	bd 01       	movw	r22, r26
 686:	cf 01       	movw	r24, r30
 688:	08 95       	ret

0000068a <_exit>:
 68a:	f8 94       	cli

0000068c <__stop_program>:
 68c:	ff cf       	rjmp	.-2      	; 0x68c <__stop_program>
