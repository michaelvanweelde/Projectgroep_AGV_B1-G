
bin\Debug\AGV_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a8  00800200  000007aa  0000085e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007aa  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  008002a8  008002a8  00000906  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00000906  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000040  00000000  00000000  00000909  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000011a  00000000  00000000  00000949  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000431  00000000  00000000  00000a63  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000279  00000000  00000000  00000e94  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000607  00000000  00000000  0000110d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e0  00000000  00000000  00001714  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000019b  00000000  00000000  000017f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000483  00000000  00000000  0000198f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea ea       	ldi	r30, 0xAA	; 170
  fc:	f7 e0       	ldi	r31, 0x07	; 7
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 3a       	cpi	r26, 0xA8	; 168
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	12 e0       	ldi	r17, 0x02	; 2
 110:	a8 ea       	ldi	r26, 0xA8	; 168
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	aa 3a       	cpi	r26, 0xAA	; 170
 11a:	b1 07       	cpc	r27, r17
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 26 02 	call	0x44c	; 0x44c <main>
 122:	0c 94 d3 03 	jmp	0x7a6	; 0x7a6 <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <MagnometerRead>:




int MagnometerRead()
{
 12a:	df 93       	push	r29
 12c:	cf 93       	push	r28
 12e:	0f 92       	push	r0
 130:	0f 92       	push	r0
 132:	cd b7       	in	r28, 0x3d	; 61
 134:	de b7       	in	r29, 0x3e	; 62
    // Initialize variables------------------------------------
    int hal1;
    int hal2;
    int angle;
    volatile int timeout=0;
 136:	1a 82       	std	Y+2, r1	; 0x02
 138:	19 82       	std	Y+1, r1	; 0x01
    //---------------------------------------------------------


    // Switch the ADC to the correct pin and read data---------
    ADMUX  = (ADMUX | (1<<MUX1)|(1<<MUX2)) & ~(1<<MUX0);                // PIN selection (A6)
 13a:	6c e7       	ldi	r22, 0x7C	; 124
 13c:	70 e0       	ldi	r23, 0x00	; 0
 13e:	db 01       	movw	r26, r22
 140:	8c 91       	ld	r24, X
 142:	88 7f       	andi	r24, 0xF8	; 248
 144:	86 60       	ori	r24, 0x06	; 6
 146:	8c 93       	st	X, r24
    ADCSRA |= (1 << ADSC);                                              // Start the conversion
 148:	ea e7       	ldi	r30, 0x7A	; 122
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	80 64       	ori	r24, 0x40	; 64
 150:	80 83       	st	Z, r24
    while ( (ADCSRA & (1 << ADSC)) == 1 && timeout++<(ADC_Tout/2) );    // Wait until conversion is finished
 152:	80 81       	ld	r24, Z
    hal1 = (ADCH);                                                      // ADC data is left aligned and can be read from ADCH directly as an 8 bit value
 154:	29 e7       	ldi	r18, 0x79	; 121
 156:	30 e0       	ldi	r19, 0x00	; 0
 158:	d9 01       	movw	r26, r18
 15a:	8c 91       	ld	r24, X
 15c:	48 2f       	mov	r20, r24
 15e:	50 e0       	ldi	r21, 0x00	; 0
                                                                        // Because ADC value is an 8 bit value overflow is impossible

    ADMUX  = (ADMUX | (1<<MUX0)|(1<<MUX1)|(1<<MUX2));                   // PIN selection (A7)
 160:	db 01       	movw	r26, r22
 162:	8c 91       	ld	r24, X
 164:	87 60       	ori	r24, 0x07	; 7
 166:	8c 93       	st	X, r24
    ADCSRA |= (1 << ADSC);                                              // Start the conversion
 168:	80 81       	ld	r24, Z
 16a:	80 64       	ori	r24, 0x40	; 64
 16c:	80 83       	st	Z, r24
    while ( (ADCSRA & (1 << ADSC)) == 1 && timeout++<(ADC_Tout/2) );    // Wait until conversion is finished
 16e:	e0 81       	ld	r30, Z
    hal2 = (ADCH);                                                      // ADC data is left aligned and can be read from ADCH directly as an 8 bit value
 170:	f9 01       	movw	r30, r18
 172:	80 81       	ld	r24, Z
 174:	90 e0       	ldi	r25, 0x00	; 0
    //---------------------------------------------------------         // Because ADC value is an 8 bit value overflow is impossible


    //-compare the data-----------
    if( (hal1 > hal2) && (hal1 >= AOP00) )angle = 0;
    if( (hal1 > hal2) && (hal1 <  AOP18) )angle = 180;
 176:	84 17       	cp	r24, r20
 178:	95 07       	cpc	r25, r21
 17a:	34 f4       	brge	.+12     	; 0x188 <MagnometerRead+0x5e>
 17c:	44 36       	cpi	r20, 0x64	; 100
 17e:	51 05       	cpc	r21, r1
 180:	1c f4       	brge	.+6      	; 0x188 <MagnometerRead+0x5e>
 182:	24 eb       	ldi	r18, 0xB4	; 180
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	02 c0       	rjmp	.+4      	; 0x18c <MagnometerRead+0x62>
 188:	20 e0       	ldi	r18, 0x00	; 0
 18a:	30 e0       	ldi	r19, 0x00	; 0
    if( (hal1 < hal2) && (hal2 >= AOP90) )angle = 90;
 18c:	48 17       	cp	r20, r24
 18e:	59 07       	cpc	r21, r25
 190:	44 f4       	brge	.+16     	; 0x1a2 <MagnometerRead+0x78>
 192:	84 36       	cpi	r24, 0x64	; 100
 194:	91 05       	cpc	r25, r1
 196:	1c f4       	brge	.+6      	; 0x19e <MagnometerRead+0x74>
 198:	2e e0       	ldi	r18, 0x0E	; 14
 19a:	31 e0       	ldi	r19, 0x01	; 1
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <MagnometerRead+0x78>
 19e:	2a e5       	ldi	r18, 0x5A	; 90
 1a0:	30 e0       	ldi	r19, 0x00	; 0
    if( (hal1 < hal2) && (hal2 <  AOP27) )angle = 270;
    //----------------------------

    return angle;
}
 1a2:	82 2f       	mov	r24, r18
 1a4:	93 2f       	mov	r25, r19
 1a6:	0f 90       	pop	r0
 1a8:	0f 90       	pop	r0
 1aa:	cf 91       	pop	r28
 1ac:	df 91       	pop	r29
 1ae:	08 95       	ret

000001b0 <ColorSensorRead>:




int ColorSensorRead(int sensor)
{
 1b0:	ef 92       	push	r14
 1b2:	ff 92       	push	r15
 1b4:	0f 93       	push	r16
 1b6:	1f 93       	push	r17
 1b8:	df 93       	push	r29
 1ba:	cf 93       	push	r28
 1bc:	00 d0       	rcall	.+0      	; 0x1be <ColorSensorRead+0xe>
 1be:	0f 92       	push	r0
 1c0:	cd b7       	in	r28, 0x3d	; 61
 1c2:	de b7       	in	r29, 0x3e	; 62
 1c4:	8c 01       	movw	r16, r24
    // Initialize variables------------------------------------
    volatile int width=0;
 1c6:	1a 82       	std	Y+2, r1	; 0x02
 1c8:	19 82       	std	Y+1, r1	; 0x01
 1ca:	ee 24       	eor	r14, r14
 1cc:	ff 24       	eor	r15, r15
        volatile int timeout=0;
        //-----------------------------------------------------


        // Wait until pin turns high then measure pulse width--
        while( (TCS3200G_L) && (sensor == 0) && (timeout++<TCS_Tout) );         // Wait for pin to turn low to prevent possible error
 1ce:	e3 e2       	ldi	r30, 0x23	; 35
 1d0:	f0 e0       	ldi	r31, 0x00	; 0


    for(X=0; X<10; X++)
    {
        //Create a timeout variable for error detection--------
        volatile int timeout=0;
 1d2:	1c 82       	std	Y+4, r1	; 0x04
 1d4:	1b 82       	std	Y+3, r1	; 0x03
        //-----------------------------------------------------


        // Wait until pin turns high then measure pulse width--
        while( (TCS3200G_L) && (sensor == 0) && (timeout++<TCS_Tout) );         // Wait for pin to turn low to prevent possible error
 1d6:	80 81       	ld	r24, Z
 1d8:	83 ff       	sbrs	r24, 3
 1da:	0c c0       	rjmp	.+24     	; 0x1f4 <ColorSensorRead+0x44>
 1dc:	01 15       	cp	r16, r1
 1de:	11 05       	cpc	r17, r1
 1e0:	49 f4       	brne	.+18     	; 0x1f4 <ColorSensorRead+0x44>
 1e2:	2b 81       	ldd	r18, Y+3	; 0x03
 1e4:	3c 81       	ldd	r19, Y+4	; 0x04
 1e6:	c9 01       	movw	r24, r18
 1e8:	01 96       	adiw	r24, 0x01	; 1
 1ea:	9c 83       	std	Y+4, r25	; 0x04
 1ec:	8b 83       	std	Y+3, r24	; 0x03
 1ee:	20 5d       	subi	r18, 0xD0	; 208
 1f0:	37 40       	sbci	r19, 0x07	; 7
 1f2:	8c f3       	brlt	.-30     	; 0x1d6 <ColorSensorRead+0x26>
        while(!(TCS3200G_L) && (sensor == 0) && (timeout++<TCS_Tout) );         // wait out the Low period
 1f4:	80 81       	ld	r24, Z
 1f6:	83 fd       	sbrc	r24, 3
 1f8:	0c c0       	rjmp	.+24     	; 0x212 <ColorSensorRead+0x62>
 1fa:	01 15       	cp	r16, r1
 1fc:	11 05       	cpc	r17, r1
 1fe:	49 f4       	brne	.+18     	; 0x212 <ColorSensorRead+0x62>
 200:	2b 81       	ldd	r18, Y+3	; 0x03
 202:	3c 81       	ldd	r19, Y+4	; 0x04
 204:	c9 01       	movw	r24, r18
 206:	01 96       	adiw	r24, 0x01	; 1
 208:	9c 83       	std	Y+4, r25	; 0x04
 20a:	8b 83       	std	Y+3, r24	; 0x03
 20c:	20 5d       	subi	r18, 0xD0	; 208
 20e:	37 40       	sbci	r19, 0x07	; 7
 210:	8c f3       	brlt	.-30     	; 0x1f4 <ColorSensorRead+0x44>
        while( (TCS3200G_L) && (sensor == 0) && (timeout++<TCS_Tout) )width++;  // Measure the pulse width
 212:	80 81       	ld	r24, Z
 214:	83 ff       	sbrs	r24, 3
 216:	1d c0       	rjmp	.+58     	; 0x252 <ColorSensorRead+0xa2>
 218:	01 15       	cp	r16, r1
 21a:	11 05       	cpc	r17, r1
 21c:	d1 f4       	brne	.+52     	; 0x252 <ColorSensorRead+0xa2>
 21e:	2b 81       	ldd	r18, Y+3	; 0x03
 220:	3c 81       	ldd	r19, Y+4	; 0x04
 222:	c9 01       	movw	r24, r18
 224:	01 96       	adiw	r24, 0x01	; 1
 226:	9c 83       	std	Y+4, r25	; 0x04
 228:	8b 83       	std	Y+3, r24	; 0x03
 22a:	20 5d       	subi	r18, 0xD0	; 208
 22c:	37 40       	sbci	r19, 0x07	; 7
 22e:	8c f4       	brge	.+34     	; 0x252 <ColorSensorRead+0xa2>
 230:	89 81       	ldd	r24, Y+1	; 0x01
 232:	9a 81       	ldd	r25, Y+2	; 0x02
 234:	01 96       	adiw	r24, 0x01	; 1
 236:	9a 83       	std	Y+2, r25	; 0x02
 238:	89 83       	std	Y+1, r24	; 0x01
 23a:	80 81       	ld	r24, Z
 23c:	83 ff       	sbrs	r24, 3
 23e:	09 c0       	rjmp	.+18     	; 0x252 <ColorSensorRead+0xa2>
 240:	2b 81       	ldd	r18, Y+3	; 0x03
 242:	3c 81       	ldd	r19, Y+4	; 0x04
 244:	c9 01       	movw	r24, r18
 246:	01 96       	adiw	r24, 0x01	; 1
 248:	9c 83       	std	Y+4, r25	; 0x04
 24a:	8b 83       	std	Y+3, r24	; 0x03
 24c:	20 5d       	subi	r18, 0xD0	; 208
 24e:	37 40       	sbci	r19, 0x07	; 7
 250:	7c f3       	brlt	.-34     	; 0x230 <ColorSensorRead+0x80>

        while( (TCS3200G_R) && (sensor == 1) && (timeout++<TCS_Tout) );         // Wait for pin to turn low to prevent possible error
 252:	80 81       	ld	r24, Z
 254:	84 ff       	sbrs	r24, 4
 256:	0c c0       	rjmp	.+24     	; 0x270 <ColorSensorRead+0xc0>
 258:	01 30       	cpi	r16, 0x01	; 1
 25a:	11 05       	cpc	r17, r1
 25c:	49 f4       	brne	.+18     	; 0x270 <ColorSensorRead+0xc0>
 25e:	2b 81       	ldd	r18, Y+3	; 0x03
 260:	3c 81       	ldd	r19, Y+4	; 0x04
 262:	c9 01       	movw	r24, r18
 264:	01 96       	adiw	r24, 0x01	; 1
 266:	9c 83       	std	Y+4, r25	; 0x04
 268:	8b 83       	std	Y+3, r24	; 0x03
 26a:	20 5d       	subi	r18, 0xD0	; 208
 26c:	37 40       	sbci	r19, 0x07	; 7
 26e:	8c f3       	brlt	.-30     	; 0x252 <ColorSensorRead+0xa2>
        while(!(TCS3200G_R) && (sensor == 1) && (timeout++<TCS_Tout) );         // wait out the Low period
 270:	80 81       	ld	r24, Z
 272:	84 fd       	sbrc	r24, 4
 274:	0c c0       	rjmp	.+24     	; 0x28e <ColorSensorRead+0xde>
 276:	01 30       	cpi	r16, 0x01	; 1
 278:	11 05       	cpc	r17, r1
 27a:	49 f4       	brne	.+18     	; 0x28e <ColorSensorRead+0xde>
 27c:	2b 81       	ldd	r18, Y+3	; 0x03
 27e:	3c 81       	ldd	r19, Y+4	; 0x04
 280:	c9 01       	movw	r24, r18
 282:	01 96       	adiw	r24, 0x01	; 1
 284:	9c 83       	std	Y+4, r25	; 0x04
 286:	8b 83       	std	Y+3, r24	; 0x03
 288:	20 5d       	subi	r18, 0xD0	; 208
 28a:	37 40       	sbci	r19, 0x07	; 7
 28c:	8c f3       	brlt	.-30     	; 0x270 <ColorSensorRead+0xc0>
        while( (TCS3200G_R) && (sensor == 1) && (timeout++<TCS_Tout) )width++;  // Measure the pulse width
 28e:	80 81       	ld	r24, Z
 290:	84 ff       	sbrs	r24, 4
 292:	1d c0       	rjmp	.+58     	; 0x2ce <ColorSensorRead+0x11e>
 294:	01 30       	cpi	r16, 0x01	; 1
 296:	11 05       	cpc	r17, r1
 298:	d1 f4       	brne	.+52     	; 0x2ce <ColorSensorRead+0x11e>
 29a:	2b 81       	ldd	r18, Y+3	; 0x03
 29c:	3c 81       	ldd	r19, Y+4	; 0x04
 29e:	c9 01       	movw	r24, r18
 2a0:	01 96       	adiw	r24, 0x01	; 1
 2a2:	9c 83       	std	Y+4, r25	; 0x04
 2a4:	8b 83       	std	Y+3, r24	; 0x03
 2a6:	20 5d       	subi	r18, 0xD0	; 208
 2a8:	37 40       	sbci	r19, 0x07	; 7
 2aa:	8c f4       	brge	.+34     	; 0x2ce <ColorSensorRead+0x11e>
 2ac:	89 81       	ldd	r24, Y+1	; 0x01
 2ae:	9a 81       	ldd	r25, Y+2	; 0x02
 2b0:	01 96       	adiw	r24, 0x01	; 1
 2b2:	9a 83       	std	Y+2, r25	; 0x02
 2b4:	89 83       	std	Y+1, r24	; 0x01
 2b6:	80 81       	ld	r24, Z
 2b8:	84 ff       	sbrs	r24, 4
 2ba:	09 c0       	rjmp	.+18     	; 0x2ce <ColorSensorRead+0x11e>
 2bc:	2b 81       	ldd	r18, Y+3	; 0x03
 2be:	3c 81       	ldd	r19, Y+4	; 0x04
 2c0:	c9 01       	movw	r24, r18
 2c2:	01 96       	adiw	r24, 0x01	; 1
 2c4:	9c 83       	std	Y+4, r25	; 0x04
 2c6:	8b 83       	std	Y+3, r24	; 0x03
 2c8:	20 5d       	subi	r18, 0xD0	; 208
 2ca:	37 40       	sbci	r19, 0x07	; 7
 2cc:	7c f3       	brlt	.-34     	; 0x2ac <ColorSensorRead+0xfc>
        //-----------------------------------------------------


        if( timeout == TCS_Tout )   // Catch a timeout scenario and end the function early returning a 0 to the program
 2ce:	8b 81       	ldd	r24, Y+3	; 0x03
 2d0:	9c 81       	ldd	r25, Y+4	; 0x04
 2d2:	80 5d       	subi	r24, 0xD0	; 208
 2d4:	97 40       	sbci	r25, 0x07	; 7
 2d6:	c1 f4       	brne	.+48     	; 0x308 <ColorSensorRead+0x158>
        {
            // Display error code with data and return 0 for error-
            printString("warning TCS ");
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	92 e0       	ldi	r25, 0x02	; 2
 2dc:	0e 94 2d 03 	call	0x65a	; 0x65a <printString>
            printByte(sensor);
 2e0:	80 2f       	mov	r24, r16
 2e2:	0e 94 6e 03 	call	0x6dc	; 0x6dc <printByte>
            printString(" out of boundaries after: ");
 2e6:	8d e0       	ldi	r24, 0x0D	; 13
 2e8:	92 e0       	ldi	r25, 0x02	; 2
 2ea:	0e 94 2d 03 	call	0x65a	; 0x65a <printString>
            printByte(X);
 2ee:	8e 2d       	mov	r24, r14
 2f0:	0e 94 6e 03 	call	0x6dc	; 0x6dc <printByte>
            printString(" runs");
 2f4:	88 e2       	ldi	r24, 0x28	; 40
 2f6:	92 e0       	ldi	r25, 0x02	; 2
 2f8:	0e 94 2d 03 	call	0x65a	; 0x65a <printString>
            printByte('\n');
 2fc:	8a e0       	ldi	r24, 0x0A	; 10
 2fe:	0e 94 6e 03 	call	0x6dc	; 0x6dc <printByte>
 302:	20 e0       	ldi	r18, 0x00	; 0
 304:	30 e0       	ldi	r19, 0x00	; 0
 306:	13 c0       	rjmp	.+38     	; 0x32e <ColorSensorRead+0x17e>
    volatile int width=0;
    int X;
    //---------------------------------------------------------


    for(X=0; X<10; X++)
 308:	08 94       	sec
 30a:	e1 1c       	adc	r14, r1
 30c:	f1 1c       	adc	r15, r1
 30e:	8a e0       	ldi	r24, 0x0A	; 10
 310:	e8 16       	cp	r14, r24
 312:	f1 04       	cpc	r15, r1
 314:	09 f0       	breq	.+2      	; 0x318 <ColorSensorRead+0x168>
 316:	5d cf       	rjmp	.-326    	; 0x1d2 <ColorSensorRead+0x22>
        }
        //-----------------------------------------------------
    }

    //Take the average value of the measurements rounding down--
    width = width / X;
 318:	89 81       	ldd	r24, Y+1	; 0x01
 31a:	9a 81       	ldd	r25, Y+2	; 0x02
 31c:	b7 01       	movw	r22, r14
 31e:	0e 94 ac 03 	call	0x758	; 0x758 <__divmodhi4>
 322:	86 2f       	mov	r24, r22
 324:	97 2f       	mov	r25, r23
 326:	9a 83       	std	Y+2, r25	; 0x02
 328:	89 83       	std	Y+1, r24	; 0x01
    //---------------------------------------------------------


    return width; // Return value
 32a:	29 81       	ldd	r18, Y+1	; 0x01
 32c:	3a 81       	ldd	r19, Y+2	; 0x02
}
 32e:	82 2f       	mov	r24, r18
 330:	93 2f       	mov	r25, r19
 332:	0f 90       	pop	r0
 334:	0f 90       	pop	r0
 336:	0f 90       	pop	r0
 338:	0f 90       	pop	r0
 33a:	cf 91       	pop	r28
 33c:	df 91       	pop	r29
 33e:	1f 91       	pop	r17
 340:	0f 91       	pop	r16
 342:	ff 90       	pop	r15
 344:	ef 90       	pop	r14
 346:	08 95       	ret

00000348 <IRDistanceRead>:
}



int IRDistanceRead(int sensor)
{
 348:	df 93       	push	r29
 34a:	cf 93       	push	r28
 34c:	0f 92       	push	r0
 34e:	0f 92       	push	r0
 350:	cd b7       	in	r28, 0x3d	; 61
 352:	de b7       	in	r29, 0x3e	; 62
    // Initialize variables------------------------------------
    int distance=0;
    volatile int timeout=0;
 354:	1a 82       	std	Y+2, r1	; 0x02
 356:	19 82       	std	Y+1, r1	; 0x01
    int X;
    //---------------------------------------------------------


    // Switch the ADC to the correct pin-----------------------
    switch (sensor)
 358:	81 30       	cpi	r24, 0x01	; 1
 35a:	91 05       	cpc	r25, r1
 35c:	a1 f0       	breq	.+40     	; 0x386 <IRDistanceRead+0x3e>
 35e:	82 30       	cpi	r24, 0x02	; 2
 360:	91 05       	cpc	r25, r1
 362:	e1 f0       	breq	.+56     	; 0x39c <IRDistanceRead+0x54>
 364:	89 2b       	or	r24, r25
 366:	29 f0       	breq	.+10     	; 0x372 <IRDistanceRead+0x2a>
 368:	40 e0       	ldi	r20, 0x00	; 0
 36a:	50 e0       	ldi	r21, 0x00	; 0
 36c:	20 e0       	ldi	r18, 0x00	; 0
 36e:	30 e0       	ldi	r19, 0x00	; 0
 370:	1f c0       	rjmp	.+62     	; 0x3b0 <IRDistanceRead+0x68>
    {
    case 0:                                                     // Set pin A0 as read pin
        ADMUX  = (ADMUX) & ~((1<<MUX0)|(1<<MUX1)|(1<<MUX2));    // PIN selection
 372:	ec e7       	ldi	r30, 0x7C	; 124
 374:	f0 e0       	ldi	r31, 0x00	; 0
 376:	80 81       	ld	r24, Z
 378:	88 7f       	andi	r24, 0xF8	; 248
 37a:	80 83       	st	Z, r24
 37c:	40 e0       	ldi	r20, 0x00	; 0
 37e:	50 e0       	ldi	r21, 0x00	; 0
 380:	20 e0       	ldi	r18, 0x00	; 0
 382:	30 e0       	ldi	r19, 0x00	; 0
 384:	15 c0       	rjmp	.+42     	; 0x3b0 <IRDistanceRead+0x68>
        break;

    case 1:                                                     // Set pin A2 as read pin
        ADMUX  = (ADMUX | (1<<MUX1)) & ~((1<<MUX0)|(1<<MUX2));  // PIN selection
 386:	ec e7       	ldi	r30, 0x7C	; 124
 388:	f0 e0       	ldi	r31, 0x00	; 0
 38a:	80 81       	ld	r24, Z
 38c:	88 7f       	andi	r24, 0xF8	; 248
 38e:	82 60       	ori	r24, 0x02	; 2
 390:	80 83       	st	Z, r24
 392:	40 e0       	ldi	r20, 0x00	; 0
 394:	50 e0       	ldi	r21, 0x00	; 0
 396:	20 e0       	ldi	r18, 0x00	; 0
 398:	30 e0       	ldi	r19, 0x00	; 0
 39a:	0a c0       	rjmp	.+20     	; 0x3b0 <IRDistanceRead+0x68>
        break;

    case 2:                                                     // Set pin A4 as read pin
        ADMUX  = (ADMUX | (1<<MUX2)) & ~((1<<MUX0)|(1<<MUX1));  // PIN selection
 39c:	ec e7       	ldi	r30, 0x7C	; 124
 39e:	f0 e0       	ldi	r31, 0x00	; 0
 3a0:	80 81       	ld	r24, Z
 3a2:	88 7f       	andi	r24, 0xF8	; 248
 3a4:	84 60       	ori	r24, 0x04	; 4
 3a6:	80 83       	st	Z, r24
 3a8:	40 e0       	ldi	r20, 0x00	; 0
 3aa:	50 e0       	ldi	r21, 0x00	; 0
 3ac:	20 e0       	ldi	r18, 0x00	; 0
 3ae:	30 e0       	ldi	r19, 0x00	; 0


    // Take measurements with the ADC and collect the average--
    for(X=0; X<5; X++)
    {
        ADCSRA |= (1 << ADSC);                                              // Start the conversion
 3b0:	ea e7       	ldi	r30, 0x7A	; 122
 3b2:	f0 e0       	ldi	r31, 0x00	; 0
        while ( (ADCSRA & (1 << ADSC)) == 1 && timeout++<(ADC_Tout/2) );    // Wait until conversion is finished
        distance += (ADCH);                                                 // ADC data is left aligned and can be read from ADCH directly as an 8 bit value
 3b4:	a9 e7       	ldi	r26, 0x79	; 121
 3b6:	b0 e0       	ldi	r27, 0x00	; 0


    // Take measurements with the ADC and collect the average--
    for(X=0; X<5; X++)
    {
        ADCSRA |= (1 << ADSC);                                              // Start the conversion
 3b8:	80 81       	ld	r24, Z
 3ba:	80 64       	ori	r24, 0x40	; 64
 3bc:	80 83       	st	Z, r24
        while ( (ADCSRA & (1 << ADSC)) == 1 && timeout++<(ADC_Tout/2) );    // Wait until conversion is finished
 3be:	80 81       	ld	r24, Z
        distance += (ADCH);                                                 // ADC data is left aligned and can be read from ADCH directly as an 8 bit value
 3c0:	8c 91       	ld	r24, X
 3c2:	48 0f       	add	r20, r24
 3c4:	51 1d       	adc	r21, r1
    }
    //---------------------------------------------------------


    // Take measurements with the ADC and collect the average--
    for(X=0; X<5; X++)
 3c6:	2f 5f       	subi	r18, 0xFF	; 255
 3c8:	3f 4f       	sbci	r19, 0xFF	; 255
 3ca:	25 30       	cpi	r18, 0x05	; 5
 3cc:	31 05       	cpc	r19, r1
 3ce:	a1 f7       	brne	.-24     	; 0x3b8 <IRDistanceRead+0x70>
    }                                                                       // Because ADC value is an 8 bit value overflow is impossible
    //---------------------------------------------------------


    // If a timeout occurs attempt to retry the measurement----
    if( timeout == ADC_Tout/2 )
 3d0:	89 81       	ldd	r24, Y+1	; 0x01
 3d2:	9a 81       	ldd	r25, Y+2	; 0x02
 3d4:	88 5e       	subi	r24, 0xE8	; 232
 3d6:	93 40       	sbci	r25, 0x03	; 3
 3d8:	51 f5       	brne	.+84     	; 0x42e <IRDistanceRead+0xe6>
    {
        printString("warning ADC out of boundaries retrying");
 3da:	8e e2       	ldi	r24, 0x2E	; 46
 3dc:	92 e0       	ldi	r25, 0x02	; 2
 3de:	0e 94 2d 03 	call	0x65a	; 0x65a <printString>
        printByte('\n');
 3e2:	8a e0       	ldi	r24, 0x0A	; 10
 3e4:	0e 94 6e 03 	call	0x6dc	; 0x6dc <printByte>
 3e8:	40 e0       	ldi	r20, 0x00	; 0
 3ea:	50 e0       	ldi	r21, 0x00	; 0
 3ec:	20 e0       	ldi	r18, 0x00	; 0
 3ee:	30 e0       	ldi	r19, 0x00	; 0
        distance=0;
        for(X=0; X<5; X++)
        {
            ADCSRA |= (1 << ADSC);                                          // Start the conversion
 3f0:	ea e7       	ldi	r30, 0x7A	; 122
 3f2:	f0 e0       	ldi	r31, 0x00	; 0
            while ( (ADCSRA & (1 << ADSC)) == 1 && timeout++<(ADC_Tout) );  // Wait until conversion is finished
            distance += (ADCH);                                             // ADC data is left aligned and can be read from ADCH directly as an 8 bit value
 3f4:	a9 e7       	ldi	r26, 0x79	; 121
 3f6:	b0 e0       	ldi	r27, 0x00	; 0
        printString("warning ADC out of boundaries retrying");
        printByte('\n');
        distance=0;
        for(X=0; X<5; X++)
        {
            ADCSRA |= (1 << ADSC);                                          // Start the conversion
 3f8:	80 81       	ld	r24, Z
 3fa:	80 64       	ori	r24, 0x40	; 64
 3fc:	80 83       	st	Z, r24
            while ( (ADCSRA & (1 << ADSC)) == 1 && timeout++<(ADC_Tout) );  // Wait until conversion is finished
 3fe:	80 81       	ld	r24, Z
            distance += (ADCH);                                             // ADC data is left aligned and can be read from ADCH directly as an 8 bit value
 400:	8c 91       	ld	r24, X
 402:	48 0f       	add	r20, r24
 404:	51 1d       	adc	r21, r1
    if( timeout == ADC_Tout/2 )
    {
        printString("warning ADC out of boundaries retrying");
        printByte('\n');
        distance=0;
        for(X=0; X<5; X++)
 406:	2f 5f       	subi	r18, 0xFF	; 255
 408:	3f 4f       	sbci	r19, 0xFF	; 255
 40a:	25 30       	cpi	r18, 0x05	; 5
 40c:	31 05       	cpc	r19, r1
 40e:	a1 f7       	brne	.-24     	; 0x3f8 <IRDistanceRead+0xb0>
        {
            ADCSRA |= (1 << ADSC);                                          // Start the conversion
            while ( (ADCSRA & (1 << ADSC)) == 1 && timeout++<(ADC_Tout) );  // Wait until conversion is finished
            distance += (ADCH);                                             // ADC data is left aligned and can be read from ADCH directly as an 8 bit value
        }
        if( timeout == ADC_Tout)                                            // if retry has failed return 0
 410:	89 81       	ldd	r24, Y+1	; 0x01
 412:	9a 81       	ldd	r25, Y+2	; 0x02
 414:	80 5d       	subi	r24, 0xD0	; 208
 416:	97 40       	sbci	r25, 0x07	; 7
 418:	51 f4       	brne	.+20     	; 0x42e <IRDistanceRead+0xe6>
        {
            printString("Retry failed");
 41a:	85 e5       	ldi	r24, 0x55	; 85
 41c:	92 e0       	ldi	r25, 0x02	; 2
 41e:	0e 94 2d 03 	call	0x65a	; 0x65a <printString>
            printByte('\n');
 422:	8a e0       	ldi	r24, 0x0A	; 10
 424:	0e 94 6e 03 	call	0x6dc	; 0x6dc <printByte>
 428:	20 e0       	ldi	r18, 0x00	; 0
 42a:	30 e0       	ldi	r19, 0x00	; 0
 42c:	08 c0       	rjmp	.+16     	; 0x43e <IRDistanceRead+0xf6>
    }
    //---------------------------------------------------------


    //Take the average value of the measurements rounding down-
    distance = distance / X;
 42e:	ca 01       	movw	r24, r20
 430:	65 e0       	ldi	r22, 0x05	; 5
 432:	70 e0       	ldi	r23, 0x00	; 0
 434:	0e 94 ac 03 	call	0x758	; 0x758 <__divmodhi4>
 438:	86 2f       	mov	r24, r22
 43a:	97 2f       	mov	r25, r23
 43c:	9c 01       	movw	r18, r24
    //---------------------------------------------------------

    return distance;
}
 43e:	82 2f       	mov	r24, r18
 440:	93 2f       	mov	r25, r19
 442:	0f 90       	pop	r0
 444:	0f 90       	pop	r0
 446:	cf 91       	pop	r28
 448:	df 91       	pop	r29
 44a:	08 95       	ret

0000044c <main>:
int IRDistanceRead(int sensor);
int ColorSensorRead(int sensor);


int main(void)
{
 44c:	2f 92       	push	r2
 44e:	3f 92       	push	r3
 450:	4f 92       	push	r4
 452:	5f 92       	push	r5
 454:	6f 92       	push	r6
 456:	7f 92       	push	r7
 458:	8f 92       	push	r8
 45a:	9f 92       	push	r9
 45c:	af 92       	push	r10
 45e:	bf 92       	push	r11
 460:	cf 92       	push	r12
 462:	df 92       	push	r13
 464:	ef 92       	push	r14
 466:	ff 92       	push	r15
 468:	0f 93       	push	r16
 46a:	1f 93       	push	r17
 46c:	cf 93       	push	r28
 46e:	df 93       	push	r29

//-Initialize ADCs---------
    ADMUX |= (0 << REFS1) |(1 << REFS0)|(1<<ADLAR);     // Voltage reference via capacitor on arduino
 470:	ec e7       	ldi	r30, 0x7C	; 124
 472:	f0 e0       	ldi	r31, 0x00	; 0
 474:	80 81       	ld	r24, Z
 476:	80 66       	ori	r24, 0x60	; 96
 478:	80 83       	st	Z, r24
    ADCSRA |= (1 << ADEN) |(0 << ADIE);                 // ADC enable and ADC conversion complete interrupt disabled
 47a:	ea e7       	ldi	r30, 0x7A	; 122
 47c:	f0 e0       	ldi	r31, 0x00	; 0
 47e:	80 81       	ld	r24, Z
 480:	80 68       	ori	r24, 0x80	; 128
 482:	80 83       	st	Z, r24
    ADCSRA |= (1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0);   // Prescaler settings (Currently 128)
 484:	80 81       	ld	r24, Z
 486:	87 60       	ori	r24, 0x07	; 7
 488:	80 83       	st	Z, r24
    DIDR0 = 0b11111111;                                 // Disable Digital input
 48a:	8f ef       	ldi	r24, 0xFF	; 255
 48c:	80 93 7e 00 	sts	0x007E, r24
    DIDR2 = 0b11111111;                                 // Disable Digital input
 490:	80 93 7d 00 	sts	0x007D, r24
    ADCSRA |= (1 << ADSC);                              // Run a single conversion in order to prime the circuit
 494:	80 81       	ld	r24, Z
 496:	80 64       	ori	r24, 0x40	; 64
 498:	80 83       	st	Z, r24
//-------------------------

//-Initialize pins---------
    TCS3200_INIT;
 49a:	e4 e2       	ldi	r30, 0x24	; 36
 49c:	f0 e0       	ldi	r31, 0x00	; 0
 49e:	80 81       	ld	r24, Z
 4a0:	83 60       	ori	r24, 0x03	; 3
 4a2:	80 83       	st	Z, r24
    LED_INIT;
 4a4:	e7 e2       	ldi	r30, 0x27	; 39
 4a6:	f0 e0       	ldi	r31, 0x00	; 0
 4a8:	80 81       	ld	r24, Z
 4aa:	86 6e       	ori	r24, 0xE6	; 230
 4ac:	80 83       	st	Z, r24
//-------------------------


//-Initialize motors-------
    MotorL_INIT;
 4ae:	e1 e0       	ldi	r30, 0x01	; 1
 4b0:	f1 e0       	ldi	r31, 0x01	; 1
 4b2:	80 81       	ld	r24, Z
 4b4:	88 61       	ori	r24, 0x18	; 24
 4b6:	80 83       	st	Z, r24
    MotorR_INIT;
 4b8:	80 81       	ld	r24, Z
 4ba:	80 66       	ori	r24, 0x60	; 96
 4bc:	80 83       	st	Z, r24
//-------------------------


//-Initialize Serial-------
    initUSART();
 4be:	0e 94 0b 03 	call	0x616	; 0x616 <initUSART>
//-------------------------


//-zero magnometer---------
    north_angle = MagnometerRead();
 4c2:	0e 94 95 00 	call	0x12a	; 0x12a <MagnometerRead>
 4c6:	90 93 a9 02 	sts	0x02A9, r25
 4ca:	80 93 a8 02 	sts	0x02A8, r24
//-------------------------


//-Enable interrupts-------
    sei();
 4ce:	78 94       	sei
//-------------------------
//-End of setup-----------------------------------------]
    printString("RDY");
 4d0:	82 e6       	ldi	r24, 0x62	; 98
 4d2:	92 e0       	ldi	r25, 0x02	; 2
 4d4:	0e 94 2d 03 	call	0x65a	; 0x65a <printString>
    printByte('\n');
 4d8:	8a e0       	ldi	r24, 0x0A	; 10
 4da:	0e 94 6e 03 	call	0x6dc	; 0x6dc <printByte>
    {

    while(testmode == 1){
    printByte('\n');
    // IR sensor diagnostic printing
    if (IR_FL > 0) printString("FL  "); else printString("    ");
 4de:	c9 e0       	ldi	r28, 0x09	; 9
 4e0:	d1 e0       	ldi	r29, 0x01	; 1
 4e2:	0b e6       	ldi	r16, 0x6B	; 107
 4e4:	12 e0       	ldi	r17, 0x02	; 2
    if (IR_FR1 > 0)printString("FR1 "); else printString("    ");
    if (IR_FR2 > 0)printString("FR2 "); else printString("    ");
    if (IR_BL > 0) printString("BL  "); else printString("    ");
    if (IR_BR > 0) printString("BR  "); else printString("    ");
 4e6:	0f 2e       	mov	r0, r31
 4e8:	ff e7       	ldi	r31, 0x7F	; 127
 4ea:	2f 2e       	mov	r2, r31
 4ec:	f2 e0       	ldi	r31, 0x02	; 2
 4ee:	3f 2e       	mov	r3, r31
 4f0:	f0 2d       	mov	r31, r0

    // Magnometer Diagnostic printing
    printString(" MAG=");
 4f2:	0f 2e       	mov	r0, r31
 4f4:	f4 e8       	ldi	r31, 0x84	; 132
 4f6:	4f 2e       	mov	r4, r31
 4f8:	f2 e0       	ldi	r31, 0x02	; 2
 4fa:	5f 2e       	mov	r5, r31
 4fc:	f0 2d       	mov	r31, r0
    printByte(MagnometerRead());

    // Distance sensor Diagnostic printing
    printString(" IR0=");
 4fe:	0f 2e       	mov	r0, r31
 500:	fa e8       	ldi	r31, 0x8A	; 138
 502:	6f 2e       	mov	r6, r31
 504:	f2 e0       	ldi	r31, 0x02	; 2
 506:	7f 2e       	mov	r7, r31
 508:	f0 2d       	mov	r31, r0
    printByte(IRDistanceRead(0));
    printString(" IR1=");
 50a:	0f 2e       	mov	r0, r31
 50c:	f0 e9       	ldi	r31, 0x90	; 144
 50e:	8f 2e       	mov	r8, r31
 510:	f2 e0       	ldi	r31, 0x02	; 2
 512:	9f 2e       	mov	r9, r31
 514:	f0 2d       	mov	r31, r0
    printByte(IRDistanceRead(1));
    printString(" IR2=");
 516:	0f 2e       	mov	r0, r31
 518:	f6 e9       	ldi	r31, 0x96	; 150
 51a:	af 2e       	mov	r10, r31
 51c:	f2 e0       	ldi	r31, 0x02	; 2
 51e:	bf 2e       	mov	r11, r31
 520:	f0 2d       	mov	r31, r0
    printByte(IRDistanceRead(2));

    //colorsensor diagnostic printing
    printString(" CL0=");
 522:	0f 2e       	mov	r0, r31
 524:	fc e9       	ldi	r31, 0x9C	; 156
 526:	cf 2e       	mov	r12, r31
 528:	f2 e0       	ldi	r31, 0x02	; 2
 52a:	df 2e       	mov	r13, r31
 52c:	f0 2d       	mov	r31, r0
    printByte(ColorSensorRead(0));
    printString(" CL1");
 52e:	0f 2e       	mov	r0, r31
 530:	f2 ea       	ldi	r31, 0xA2	; 162
 532:	ef 2e       	mov	r14, r31
 534:	f2 e0       	ldi	r31, 0x02	; 2
 536:	ff 2e       	mov	r15, r31
 538:	f0 2d       	mov	r31, r0

    while(1)
    {

    while(testmode == 1){
    printByte('\n');
 53a:	8a e0       	ldi	r24, 0x0A	; 10
 53c:	0e 94 6e 03 	call	0x6dc	; 0x6dc <printByte>
    // IR sensor diagnostic printing
    if (IR_FL > 0) printString("FL  "); else printString("    ");
 540:	88 81       	ld	r24, Y
 542:	86 ff       	sbrs	r24, 6
 544:	05 c0       	rjmp	.+10     	; 0x550 <main+0x104>
 546:	86 e6       	ldi	r24, 0x66	; 102
 548:	92 e0       	ldi	r25, 0x02	; 2
 54a:	0e 94 2d 03 	call	0x65a	; 0x65a <printString>
 54e:	03 c0       	rjmp	.+6      	; 0x556 <main+0x10a>
 550:	c8 01       	movw	r24, r16
 552:	0e 94 2d 03 	call	0x65a	; 0x65a <printString>
    if (IR_FR1 > 0)printString("FR1 "); else printString("    ");
 556:	88 81       	ld	r24, Y
 558:	86 ff       	sbrs	r24, 6
 55a:	05 c0       	rjmp	.+10     	; 0x566 <main+0x11a>
 55c:	80 e7       	ldi	r24, 0x70	; 112
 55e:	92 e0       	ldi	r25, 0x02	; 2
 560:	0e 94 2d 03 	call	0x65a	; 0x65a <printString>
 564:	03 c0       	rjmp	.+6      	; 0x56c <main+0x120>
 566:	c8 01       	movw	r24, r16
 568:	0e 94 2d 03 	call	0x65a	; 0x65a <printString>
    if (IR_FR2 > 0)printString("FR2 "); else printString("    ");
 56c:	88 81       	ld	r24, Y
 56e:	86 ff       	sbrs	r24, 6
 570:	05 c0       	rjmp	.+10     	; 0x57c <main+0x130>
 572:	85 e7       	ldi	r24, 0x75	; 117
 574:	92 e0       	ldi	r25, 0x02	; 2
 576:	0e 94 2d 03 	call	0x65a	; 0x65a <printString>
 57a:	03 c0       	rjmp	.+6      	; 0x582 <main+0x136>
 57c:	c8 01       	movw	r24, r16
 57e:	0e 94 2d 03 	call	0x65a	; 0x65a <printString>
    if (IR_BL > 0) printString("BL  "); else printString("    ");
 582:	88 81       	ld	r24, Y
 584:	86 ff       	sbrs	r24, 6
 586:	05 c0       	rjmp	.+10     	; 0x592 <main+0x146>
 588:	8a e7       	ldi	r24, 0x7A	; 122
 58a:	92 e0       	ldi	r25, 0x02	; 2
 58c:	0e 94 2d 03 	call	0x65a	; 0x65a <printString>
 590:	03 c0       	rjmp	.+6      	; 0x598 <main+0x14c>
 592:	c8 01       	movw	r24, r16
 594:	0e 94 2d 03 	call	0x65a	; 0x65a <printString>
    if (IR_BR > 0) printString("BR  "); else printString("    ");
 598:	88 81       	ld	r24, Y
 59a:	86 ff       	sbrs	r24, 6
 59c:	04 c0       	rjmp	.+8      	; 0x5a6 <main+0x15a>
 59e:	c1 01       	movw	r24, r2
 5a0:	0e 94 2d 03 	call	0x65a	; 0x65a <printString>
 5a4:	03 c0       	rjmp	.+6      	; 0x5ac <main+0x160>
 5a6:	c8 01       	movw	r24, r16
 5a8:	0e 94 2d 03 	call	0x65a	; 0x65a <printString>

    // Magnometer Diagnostic printing
    printString(" MAG=");
 5ac:	c2 01       	movw	r24, r4
 5ae:	0e 94 2d 03 	call	0x65a	; 0x65a <printString>
    printByte(MagnometerRead());
 5b2:	0e 94 95 00 	call	0x12a	; 0x12a <MagnometerRead>
 5b6:	0e 94 6e 03 	call	0x6dc	; 0x6dc <printByte>

    // Distance sensor Diagnostic printing
    printString(" IR0=");
 5ba:	c3 01       	movw	r24, r6
 5bc:	0e 94 2d 03 	call	0x65a	; 0x65a <printString>
    printByte(IRDistanceRead(0));
 5c0:	80 e0       	ldi	r24, 0x00	; 0
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	0e 94 a4 01 	call	0x348	; 0x348 <IRDistanceRead>
 5c8:	0e 94 6e 03 	call	0x6dc	; 0x6dc <printByte>
    printString(" IR1=");
 5cc:	c4 01       	movw	r24, r8
 5ce:	0e 94 2d 03 	call	0x65a	; 0x65a <printString>
    printByte(IRDistanceRead(1));
 5d2:	81 e0       	ldi	r24, 0x01	; 1
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	0e 94 a4 01 	call	0x348	; 0x348 <IRDistanceRead>
 5da:	0e 94 6e 03 	call	0x6dc	; 0x6dc <printByte>
    printString(" IR2=");
 5de:	c5 01       	movw	r24, r10
 5e0:	0e 94 2d 03 	call	0x65a	; 0x65a <printString>
    printByte(IRDistanceRead(2));
 5e4:	82 e0       	ldi	r24, 0x02	; 2
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	0e 94 a4 01 	call	0x348	; 0x348 <IRDistanceRead>
 5ec:	0e 94 6e 03 	call	0x6dc	; 0x6dc <printByte>

    //colorsensor diagnostic printing
    printString(" CL0=");
 5f0:	c6 01       	movw	r24, r12
 5f2:	0e 94 2d 03 	call	0x65a	; 0x65a <printString>
    printByte(ColorSensorRead(0));
 5f6:	80 e0       	ldi	r24, 0x00	; 0
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <ColorSensorRead>
 5fe:	0e 94 6e 03 	call	0x6dc	; 0x6dc <printByte>
    printString(" CL1");
 602:	c7 01       	movw	r24, r14
 604:	0e 94 2d 03 	call	0x65a	; 0x65a <printString>
    printByte(ColorSensorRead(1));
 608:	81 e0       	ldi	r24, 0x01	; 1
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <ColorSensorRead>
 610:	0e 94 6e 03 	call	0x6dc	; 0x6dc <printByte>
 614:	92 cf       	rjmp	.-220    	; 0x53a <main+0xee>

00000616 <initUSART>:
#include <avr/io.h>
#include "USART.h"
#include <util/setbaud.h>

void initUSART(void) {                                /* requires BAUD */
  UBRR0H = UBRRH_VALUE;                        /* defined in setbaud.h */
 616:	10 92 c5 00 	sts	0x00C5, r1
  UBRR0L = UBRRL_VALUE;
 61a:	87 e6       	ldi	r24, 0x67	; 103
 61c:	80 93 c4 00 	sts	0x00C4, r24
#if USE_2X
  UCSR0A |= (1 << U2X0);
#else
  UCSR0A &= ~(1 << U2X0);
 620:	e0 ec       	ldi	r30, 0xC0	; 192
 622:	f0 e0       	ldi	r31, 0x00	; 0
 624:	80 81       	ld	r24, Z
 626:	8d 7f       	andi	r24, 0xFD	; 253
 628:	80 83       	st	Z, r24
#endif
                                  /* Enable USART transmitter/receiver */
  UCSR0B = (1 << TXEN0) | (1 << RXEN0);
 62a:	88 e1       	ldi	r24, 0x18	; 24
 62c:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);   /* 8 data bits, 1 stop bit */
 630:	86 e0       	ldi	r24, 0x06	; 6
 632:	80 93 c2 00 	sts	0x00C2, r24
}
 636:	08 95       	ret

00000638 <transmitByte>:


void transmitByte(uint8_t data) {
 638:	98 2f       	mov	r25, r24
                                     /* Wait for empty transmit buffer */
  loop_until_bit_is_set(UCSR0A, UDRE0);
 63a:	e0 ec       	ldi	r30, 0xC0	; 192
 63c:	f0 e0       	ldi	r31, 0x00	; 0
 63e:	80 81       	ld	r24, Z
 640:	85 ff       	sbrs	r24, 5
 642:	fd cf       	rjmp	.-6      	; 0x63e <transmitByte+0x6>
  UDR0 = data;                                            /* send data */
 644:	90 93 c6 00 	sts	0x00C6, r25
}
 648:	08 95       	ret

0000064a <receiveByte>:

uint8_t receiveByte(void) {
  loop_until_bit_is_set(UCSR0A, RXC0);       /* Wait for incoming data */
 64a:	e0 ec       	ldi	r30, 0xC0	; 192
 64c:	f0 e0       	ldi	r31, 0x00	; 0
 64e:	80 81       	ld	r24, Z
 650:	88 23       	and	r24, r24
 652:	ec f7       	brge	.-6      	; 0x64e <receiveByte+0x4>
  return UDR0;                                /* return register value */
 654:	80 91 c6 00 	lds	r24, 0x00C6
}
 658:	08 95       	ret

0000065a <printString>:


                       /* Here are a bunch of useful printing commands */

void printString(const char myString[]) {
 65a:	1f 93       	push	r17
 65c:	cf 93       	push	r28
 65e:	df 93       	push	r29
 660:	ec 01       	movw	r28, r24
  uint8_t i = 0;
  while (myString[i]) {
 662:	88 81       	ld	r24, Y
 664:	88 23       	and	r24, r24
 666:	51 f0       	breq	.+20     	; 0x67c <printString+0x22>
 668:	10 e0       	ldi	r17, 0x00	; 0
    transmitByte(myString[i]);
 66a:	0e 94 1c 03 	call	0x638	; 0x638 <transmitByte>
    i++;
 66e:	1f 5f       	subi	r17, 0xFF	; 255

                       /* Here are a bunch of useful printing commands */

void printString(const char myString[]) {
  uint8_t i = 0;
  while (myString[i]) {
 670:	fe 01       	movw	r30, r28
 672:	e1 0f       	add	r30, r17
 674:	f1 1d       	adc	r31, r1
 676:	80 81       	ld	r24, Z
 678:	88 23       	and	r24, r24
 67a:	b9 f7       	brne	.-18     	; 0x66a <printString+0x10>
    transmitByte(myString[i]);
    i++;
  }
}
 67c:	df 91       	pop	r29
 67e:	cf 91       	pop	r28
 680:	1f 91       	pop	r17
 682:	08 95       	ret

00000684 <readString>:

void readString(char myString[], uint8_t maxLength) {
 684:	ef 92       	push	r14
 686:	ff 92       	push	r15
 688:	0f 93       	push	r16
 68a:	1f 93       	push	r17
 68c:	cf 93       	push	r28
 68e:	df 93       	push	r29
 690:	7c 01       	movw	r14, r24
  char response;
  uint8_t i;
  i = 0;
  while (i < (maxLength - 1)) {                   /* prevent over-runs */
 692:	70 e0       	ldi	r23, 0x00	; 0
 694:	eb 01       	movw	r28, r22
 696:	21 97       	sbiw	r28, 0x01	; 1
 698:	1c 16       	cp	r1, r28
 69a:	1d 06       	cpc	r1, r29
 69c:	14 f0       	brlt	.+4      	; 0x6a2 <readString+0x1e>
 69e:	00 e0       	ldi	r16, 0x00	; 0
 6a0:	12 c0       	rjmp	.+36     	; 0x6c6 <readString+0x42>
 6a2:	00 e0       	ldi	r16, 0x00	; 0
    response = receiveByte();
 6a4:	0e 94 25 03 	call	0x64a	; 0x64a <receiveByte>
 6a8:	18 2f       	mov	r17, r24
    transmitByte(response);                                    /* echo */
 6aa:	0e 94 1c 03 	call	0x638	; 0x638 <transmitByte>
    if (response == '\r') {                     /* enter marks the end */
 6ae:	1d 30       	cpi	r17, 0x0D	; 13
 6b0:	51 f0       	breq	.+20     	; 0x6c6 <readString+0x42>
      break;
    }
    else {
      myString[i] = response;                       /* add in a letter */
 6b2:	f7 01       	movw	r30, r14
 6b4:	e0 0f       	add	r30, r16
 6b6:	f1 1d       	adc	r31, r1
 6b8:	10 83       	st	Z, r17
      i++;
 6ba:	0f 5f       	subi	r16, 0xFF	; 255

void readString(char myString[], uint8_t maxLength) {
  char response;
  uint8_t i;
  i = 0;
  while (i < (maxLength - 1)) {                   /* prevent over-runs */
 6bc:	80 2f       	mov	r24, r16
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	8c 17       	cp	r24, r28
 6c2:	9d 07       	cpc	r25, r29
 6c4:	7c f3       	brlt	.-34     	; 0x6a4 <readString+0x20>
    else {
      myString[i] = response;                       /* add in a letter */
      i++;
    }
  }
  myString[i] = 0;                          /* terminal NULL character */
 6c6:	f7 01       	movw	r30, r14
 6c8:	e0 0f       	add	r30, r16
 6ca:	f1 1d       	adc	r31, r1
 6cc:	10 82       	st	Z, r1
}
 6ce:	df 91       	pop	r29
 6d0:	cf 91       	pop	r28
 6d2:	1f 91       	pop	r17
 6d4:	0f 91       	pop	r16
 6d6:	ff 90       	pop	r15
 6d8:	ef 90       	pop	r14
 6da:	08 95       	ret

000006dc <printByte>:

void printByte(uint8_t byte) {
 6dc:	1f 93       	push	r17
 6de:	18 2f       	mov	r17, r24
              /* Converts a byte to a string of decimal text, sends it */
  transmitByte('0' + (byte / 100));                        /* Hundreds */
 6e0:	64 e6       	ldi	r22, 0x64	; 100
 6e2:	0e 94 a0 03 	call	0x740	; 0x740 <__udivmodqi4>
 6e6:	80 5d       	subi	r24, 0xD0	; 208
 6e8:	0e 94 1c 03 	call	0x638	; 0x638 <transmitByte>
  transmitByte('0' + ((byte / 10) % 10));                      /* Tens */
 6ec:	81 2f       	mov	r24, r17
 6ee:	6a e0       	ldi	r22, 0x0A	; 10
 6f0:	0e 94 a0 03 	call	0x740	; 0x740 <__udivmodqi4>
 6f4:	0e 94 a0 03 	call	0x740	; 0x740 <__udivmodqi4>
 6f8:	89 2f       	mov	r24, r25
 6fa:	80 5d       	subi	r24, 0xD0	; 208
 6fc:	0e 94 1c 03 	call	0x638	; 0x638 <transmitByte>
  transmitByte('0' + (byte % 10));                             /* Ones */
 700:	81 2f       	mov	r24, r17
 702:	6a e0       	ldi	r22, 0x0A	; 10
 704:	0e 94 a0 03 	call	0x740	; 0x740 <__udivmodqi4>
 708:	89 2f       	mov	r24, r25
 70a:	80 5d       	subi	r24, 0xD0	; 208
 70c:	0e 94 1c 03 	call	0x638	; 0x638 <transmitByte>
}
 710:	1f 91       	pop	r17
 712:	08 95       	ret

00000714 <nibbleToHexCharacter>:
  transmitByte(nibbleToHexCharacter(nibble));
}

char nibbleToHexCharacter(uint8_t nibble) {
                                   /* Converts 4 bits into hexadecimal */
  if (nibble < 10) {
 714:	8a 30       	cpi	r24, 0x0A	; 10
 716:	10 f4       	brcc	.+4      	; 0x71c <nibbleToHexCharacter+0x8>
    return ('0' + nibble);
 718:	80 5d       	subi	r24, 0xD0	; 208
 71a:	08 95       	ret
  }
  else {
    return ('A' + nibble - 10);
 71c:	89 5c       	subi	r24, 0xC9	; 201
  }
}
 71e:	08 95       	ret

00000720 <printHexByte>:
  transmitByte('0' + (byte / 100));                        /* Hundreds */
  transmitByte('0' + ((byte / 10) % 10));                      /* Tens */
  transmitByte('0' + (byte % 10));                             /* Ones */
}

void printHexByte(uint8_t byte) {
 720:	1f 93       	push	r17
 722:	18 2f       	mov	r17, r24
                        /* Prints a byte as its hexadecimal equivalent */
  uint8_t nibble;
  nibble = (byte & 0b11110000) >> 4;
  transmitByte(nibbleToHexCharacter(nibble));
 724:	82 95       	swap	r24
 726:	8f 70       	andi	r24, 0x0F	; 15
 728:	0e 94 8a 03 	call	0x714	; 0x714 <nibbleToHexCharacter>
 72c:	0e 94 1c 03 	call	0x638	; 0x638 <transmitByte>
  nibble = byte & 0b00001111;
  transmitByte(nibbleToHexCharacter(nibble));
 730:	81 2f       	mov	r24, r17
 732:	8f 70       	andi	r24, 0x0F	; 15
 734:	0e 94 8a 03 	call	0x714	; 0x714 <nibbleToHexCharacter>
 738:	0e 94 1c 03 	call	0x638	; 0x638 <transmitByte>
}
 73c:	1f 91       	pop	r17
 73e:	08 95       	ret

00000740 <__udivmodqi4>:
 740:	99 1b       	sub	r25, r25
 742:	79 e0       	ldi	r23, 0x09	; 9
 744:	04 c0       	rjmp	.+8      	; 0x74e <__udivmodqi4_ep>

00000746 <__udivmodqi4_loop>:
 746:	99 1f       	adc	r25, r25
 748:	96 17       	cp	r25, r22
 74a:	08 f0       	brcs	.+2      	; 0x74e <__udivmodqi4_ep>
 74c:	96 1b       	sub	r25, r22

0000074e <__udivmodqi4_ep>:
 74e:	88 1f       	adc	r24, r24
 750:	7a 95       	dec	r23
 752:	c9 f7       	brne	.-14     	; 0x746 <__udivmodqi4_loop>
 754:	80 95       	com	r24
 756:	08 95       	ret

00000758 <__divmodhi4>:
 758:	97 fb       	bst	r25, 7
 75a:	09 2e       	mov	r0, r25
 75c:	07 26       	eor	r0, r23
 75e:	0a d0       	rcall	.+20     	; 0x774 <__divmodhi4_neg1>
 760:	77 fd       	sbrc	r23, 7
 762:	04 d0       	rcall	.+8      	; 0x76c <__divmodhi4_neg2>
 764:	0c d0       	rcall	.+24     	; 0x77e <__udivmodhi4>
 766:	06 d0       	rcall	.+12     	; 0x774 <__divmodhi4_neg1>
 768:	00 20       	and	r0, r0
 76a:	1a f4       	brpl	.+6      	; 0x772 <__divmodhi4_exit>

0000076c <__divmodhi4_neg2>:
 76c:	70 95       	com	r23
 76e:	61 95       	neg	r22
 770:	7f 4f       	sbci	r23, 0xFF	; 255

00000772 <__divmodhi4_exit>:
 772:	08 95       	ret

00000774 <__divmodhi4_neg1>:
 774:	f6 f7       	brtc	.-4      	; 0x772 <__divmodhi4_exit>
 776:	90 95       	com	r25
 778:	81 95       	neg	r24
 77a:	9f 4f       	sbci	r25, 0xFF	; 255
 77c:	08 95       	ret

0000077e <__udivmodhi4>:
 77e:	aa 1b       	sub	r26, r26
 780:	bb 1b       	sub	r27, r27
 782:	51 e1       	ldi	r21, 0x11	; 17
 784:	07 c0       	rjmp	.+14     	; 0x794 <__udivmodhi4_ep>

00000786 <__udivmodhi4_loop>:
 786:	aa 1f       	adc	r26, r26
 788:	bb 1f       	adc	r27, r27
 78a:	a6 17       	cp	r26, r22
 78c:	b7 07       	cpc	r27, r23
 78e:	10 f0       	brcs	.+4      	; 0x794 <__udivmodhi4_ep>
 790:	a6 1b       	sub	r26, r22
 792:	b7 0b       	sbc	r27, r23

00000794 <__udivmodhi4_ep>:
 794:	88 1f       	adc	r24, r24
 796:	99 1f       	adc	r25, r25
 798:	5a 95       	dec	r21
 79a:	a9 f7       	brne	.-22     	; 0x786 <__udivmodhi4_loop>
 79c:	80 95       	com	r24
 79e:	90 95       	com	r25
 7a0:	bc 01       	movw	r22, r24
 7a2:	cd 01       	movw	r24, r26
 7a4:	08 95       	ret

000007a6 <_exit>:
 7a6:	f8 94       	cli

000007a8 <__stop_program>:
 7a8:	ff cf       	rjmp	.-2      	; 0x7a8 <__stop_program>
